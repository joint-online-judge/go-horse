// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newDomainUser(db *gorm.DB, opts ...gen.DOOption) domainUser {
	_domainUser := domainUser{}

	_domainUser.domainUserDo.UseDB(db, opts...)
	_domainUser.domainUserDo.UseModel(&model.DomainUser{})

	tableName := _domainUser.domainUserDo.TableName()
	_domainUser.ALL = field.NewAsterisk(tableName)
	_domainUser.CreatedAt = field.NewTime(tableName, "created_at")
	_domainUser.UpdatedAt = field.NewTime(tableName, "updated_at")
	_domainUser.DomainID = field.NewString(tableName, "domain_id")
	_domainUser.UserID = field.NewString(tableName, "user_id")
	_domainUser.ID = field.NewString(tableName, "id")
	_domainUser.Role = field.NewString(tableName, "role")

	_domainUser.fillFieldMap()

	return _domainUser
}

type domainUser struct {
	domainUserDo

	ALL       field.Asterisk
	CreatedAt field.Time
	UpdatedAt field.Time
	DomainID  field.String
	UserID    field.String
	ID        field.String
	Role      field.String

	fieldMap map[string]field.Expr
}

func (d domainUser) Table(newTableName string) *domainUser {
	d.domainUserDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domainUser) As(alias string) *domainUser {
	d.domainUserDo.DO = *(d.domainUserDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domainUser) updateTableName(table string) *domainUser {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DomainID = field.NewString(table, "domain_id")
	d.UserID = field.NewString(table, "user_id")
	d.ID = field.NewString(table, "id")
	d.Role = field.NewString(table, "role")

	d.fillFieldMap()

	return d
}

func (d *domainUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domainUser) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["domain_id"] = d.DomainID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["id"] = d.ID
	d.fieldMap["role"] = d.Role
}

func (d domainUser) clone(db *gorm.DB) domainUser {
	d.domainUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domainUser) replaceDB(db *gorm.DB) domainUser {
	d.domainUserDo.ReplaceDB(db)
	return d
}

type domainUserDo struct{ gen.DO }

type IDomainUserDo interface {
	gen.SubQuery
	Debug() IDomainUserDo
	WithContext(ctx context.Context) IDomainUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDomainUserDo
	WriteDB() IDomainUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDomainUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDomainUserDo
	Not(conds ...gen.Condition) IDomainUserDo
	Or(conds ...gen.Condition) IDomainUserDo
	Select(conds ...field.Expr) IDomainUserDo
	Where(conds ...gen.Condition) IDomainUserDo
	Order(conds ...field.Expr) IDomainUserDo
	Distinct(cols ...field.Expr) IDomainUserDo
	Omit(cols ...field.Expr) IDomainUserDo
	Join(table schema.Tabler, on ...field.Expr) IDomainUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDomainUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDomainUserDo
	Group(cols ...field.Expr) IDomainUserDo
	Having(conds ...gen.Condition) IDomainUserDo
	Limit(limit int) IDomainUserDo
	Offset(offset int) IDomainUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainUserDo
	Unscoped() IDomainUserDo
	Create(values ...*model.DomainUser) error
	CreateInBatches(values []*model.DomainUser, batchSize int) error
	Save(values ...*model.DomainUser) error
	First() (*model.DomainUser, error)
	Take() (*model.DomainUser, error)
	Last() (*model.DomainUser, error)
	Find() ([]*model.DomainUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainUser, err error)
	FindInBatches(result *[]*model.DomainUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DomainUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDomainUserDo
	Assign(attrs ...field.AssignExpr) IDomainUserDo
	Joins(fields ...field.RelationField) IDomainUserDo
	Preload(fields ...field.RelationField) IDomainUserDo
	FirstOrInit() (*model.DomainUser, error)
	FirstOrCreate() (*model.DomainUser, error)
	FindByPage(offset int, limit int) (result []*model.DomainUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDomainUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d domainUserDo) Debug() IDomainUserDo {
	return d.withDO(d.DO.Debug())
}

func (d domainUserDo) WithContext(ctx context.Context) IDomainUserDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainUserDo) ReadDB() IDomainUserDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainUserDo) WriteDB() IDomainUserDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainUserDo) Session(config *gorm.Session) IDomainUserDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainUserDo) Clauses(conds ...clause.Expression) IDomainUserDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainUserDo) Returning(value interface{}, columns ...string) IDomainUserDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainUserDo) Not(conds ...gen.Condition) IDomainUserDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainUserDo) Or(conds ...gen.Condition) IDomainUserDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainUserDo) Select(conds ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainUserDo) Where(conds ...gen.Condition) IDomainUserDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainUserDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDomainUserDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d domainUserDo) Order(conds ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainUserDo) Distinct(cols ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainUserDo) Omit(cols ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainUserDo) Join(table schema.Tabler, on ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainUserDo) RightJoin(table schema.Tabler, on ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainUserDo) Group(cols ...field.Expr) IDomainUserDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainUserDo) Having(conds ...gen.Condition) IDomainUserDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainUserDo) Limit(limit int) IDomainUserDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainUserDo) Offset(offset int) IDomainUserDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainUserDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainUserDo) Unscoped() IDomainUserDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainUserDo) Create(values ...*model.DomainUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainUserDo) CreateInBatches(values []*model.DomainUser, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainUserDo) Save(values ...*model.DomainUser) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainUserDo) First() (*model.DomainUser, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainUser), nil
	}
}

func (d domainUserDo) Take() (*model.DomainUser, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainUser), nil
	}
}

func (d domainUserDo) Last() (*model.DomainUser, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainUser), nil
	}
}

func (d domainUserDo) Find() ([]*model.DomainUser, error) {
	result, err := d.DO.Find()
	return result.([]*model.DomainUser), err
}

func (d domainUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainUser, err error) {
	buf := make([]*model.DomainUser, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainUserDo) FindInBatches(result *[]*model.DomainUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainUserDo) Attrs(attrs ...field.AssignExpr) IDomainUserDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainUserDo) Assign(attrs ...field.AssignExpr) IDomainUserDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainUserDo) Joins(fields ...field.RelationField) IDomainUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainUserDo) Preload(fields ...field.RelationField) IDomainUserDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainUserDo) FirstOrInit() (*model.DomainUser, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainUser), nil
	}
}

func (d domainUserDo) FirstOrCreate() (*model.DomainUser, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainUser), nil
	}
}

func (d domainUserDo) FindByPage(offset int, limit int) (result []*model.DomainUser, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainUserDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainUserDo) Delete(models ...*model.DomainUser) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainUserDo) withDO(do gen.Dao) *domainUserDo {
	d.DO = *do.(*gen.DO)
	return d
}
