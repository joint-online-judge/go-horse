// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newProblemProblemSetLink(db *gorm.DB, opts ...gen.DOOption) problemProblemSetLink {
	_problemProblemSetLink := problemProblemSetLink{}

	_problemProblemSetLink.problemProblemSetLinkDo.UseDB(db, opts...)
	_problemProblemSetLink.problemProblemSetLinkDo.UseModel(&model.ProblemProblemSetLink{})

	tableName := _problemProblemSetLink.problemProblemSetLinkDo.TableName()
	_problemProblemSetLink.ALL = field.NewAsterisk(tableName)
	_problemProblemSetLink.ProblemID = field.NewString(tableName, "problem_id")
	_problemProblemSetLink.ProblemSetID = field.NewString(tableName, "problem_set_id")
	_problemProblemSetLink.Position = field.NewInt32(tableName, "position")

	_problemProblemSetLink.fillFieldMap()

	return _problemProblemSetLink
}

type problemProblemSetLink struct {
	problemProblemSetLinkDo

	ALL          field.Asterisk
	ProblemID    field.String
	ProblemSetID field.String
	Position     field.Int32

	fieldMap map[string]field.Expr
}

func (p problemProblemSetLink) Table(newTableName string) *problemProblemSetLink {
	p.problemProblemSetLinkDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p problemProblemSetLink) As(alias string) *problemProblemSetLink {
	p.problemProblemSetLinkDo.DO = *(p.problemProblemSetLinkDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *problemProblemSetLink) updateTableName(table string) *problemProblemSetLink {
	p.ALL = field.NewAsterisk(table)
	p.ProblemID = field.NewString(table, "problem_id")
	p.ProblemSetID = field.NewString(table, "problem_set_id")
	p.Position = field.NewInt32(table, "position")

	p.fillFieldMap()

	return p
}

func (p *problemProblemSetLink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *problemProblemSetLink) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["problem_id"] = p.ProblemID
	p.fieldMap["problem_set_id"] = p.ProblemSetID
	p.fieldMap["position"] = p.Position
}

func (p problemProblemSetLink) clone(db *gorm.DB) problemProblemSetLink {
	p.problemProblemSetLinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p problemProblemSetLink) replaceDB(db *gorm.DB) problemProblemSetLink {
	p.problemProblemSetLinkDo.ReplaceDB(db)
	return p
}

type problemProblemSetLinkDo struct{ gen.DO }

type IProblemProblemSetLinkDo interface {
	gen.SubQuery
	Debug() IProblemProblemSetLinkDo
	WithContext(ctx context.Context) IProblemProblemSetLinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProblemProblemSetLinkDo
	WriteDB() IProblemProblemSetLinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProblemProblemSetLinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProblemProblemSetLinkDo
	Not(conds ...gen.Condition) IProblemProblemSetLinkDo
	Or(conds ...gen.Condition) IProblemProblemSetLinkDo
	Select(conds ...field.Expr) IProblemProblemSetLinkDo
	Where(conds ...gen.Condition) IProblemProblemSetLinkDo
	Order(conds ...field.Expr) IProblemProblemSetLinkDo
	Distinct(cols ...field.Expr) IProblemProblemSetLinkDo
	Omit(cols ...field.Expr) IProblemProblemSetLinkDo
	Join(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo
	Group(cols ...field.Expr) IProblemProblemSetLinkDo
	Having(conds ...gen.Condition) IProblemProblemSetLinkDo
	Limit(limit int) IProblemProblemSetLinkDo
	Offset(offset int) IProblemProblemSetLinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemProblemSetLinkDo
	Unscoped() IProblemProblemSetLinkDo
	Create(values ...*model.ProblemProblemSetLink) error
	CreateInBatches(values []*model.ProblemProblemSetLink, batchSize int) error
	Save(values ...*model.ProblemProblemSetLink) error
	First() (*model.ProblemProblemSetLink, error)
	Take() (*model.ProblemProblemSetLink, error)
	Last() (*model.ProblemProblemSetLink, error)
	Find() ([]*model.ProblemProblemSetLink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemProblemSetLink, err error)
	FindInBatches(result *[]*model.ProblemProblemSetLink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProblemProblemSetLink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProblemProblemSetLinkDo
	Assign(attrs ...field.AssignExpr) IProblemProblemSetLinkDo
	Joins(fields ...field.RelationField) IProblemProblemSetLinkDo
	Preload(fields ...field.RelationField) IProblemProblemSetLinkDo
	FirstOrInit() (*model.ProblemProblemSetLink, error)
	FirstOrCreate() (*model.ProblemProblemSetLink, error)
	FindByPage(offset int, limit int) (result []*model.ProblemProblemSetLink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProblemProblemSetLinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p problemProblemSetLinkDo) Debug() IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Debug())
}

func (p problemProblemSetLinkDo) WithContext(ctx context.Context) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p problemProblemSetLinkDo) ReadDB() IProblemProblemSetLinkDo {
	return p.Clauses(dbresolver.Read)
}

func (p problemProblemSetLinkDo) WriteDB() IProblemProblemSetLinkDo {
	return p.Clauses(dbresolver.Write)
}

func (p problemProblemSetLinkDo) Session(config *gorm.Session) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Session(config))
}

func (p problemProblemSetLinkDo) Clauses(conds ...clause.Expression) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p problemProblemSetLinkDo) Returning(value interface{}, columns ...string) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p problemProblemSetLinkDo) Not(conds ...gen.Condition) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p problemProblemSetLinkDo) Or(conds ...gen.Condition) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p problemProblemSetLinkDo) Select(conds ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p problemProblemSetLinkDo) Where(conds ...gen.Condition) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p problemProblemSetLinkDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProblemProblemSetLinkDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p problemProblemSetLinkDo) Order(conds ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p problemProblemSetLinkDo) Distinct(cols ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p problemProblemSetLinkDo) Omit(cols ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p problemProblemSetLinkDo) Join(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p problemProblemSetLinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p problemProblemSetLinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p problemProblemSetLinkDo) Group(cols ...field.Expr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p problemProblemSetLinkDo) Having(conds ...gen.Condition) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p problemProblemSetLinkDo) Limit(limit int) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p problemProblemSetLinkDo) Offset(offset int) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p problemProblemSetLinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p problemProblemSetLinkDo) Unscoped() IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Unscoped())
}

func (p problemProblemSetLinkDo) Create(values ...*model.ProblemProblemSetLink) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p problemProblemSetLinkDo) CreateInBatches(values []*model.ProblemProblemSetLink, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p problemProblemSetLinkDo) Save(values ...*model.ProblemProblemSetLink) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p problemProblemSetLinkDo) First() (*model.ProblemProblemSetLink, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemProblemSetLink), nil
	}
}

func (p problemProblemSetLinkDo) Take() (*model.ProblemProblemSetLink, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemProblemSetLink), nil
	}
}

func (p problemProblemSetLinkDo) Last() (*model.ProblemProblemSetLink, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemProblemSetLink), nil
	}
}

func (p problemProblemSetLinkDo) Find() ([]*model.ProblemProblemSetLink, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProblemProblemSetLink), err
}

func (p problemProblemSetLinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemProblemSetLink, err error) {
	buf := make([]*model.ProblemProblemSetLink, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p problemProblemSetLinkDo) FindInBatches(result *[]*model.ProblemProblemSetLink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p problemProblemSetLinkDo) Attrs(attrs ...field.AssignExpr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p problemProblemSetLinkDo) Assign(attrs ...field.AssignExpr) IProblemProblemSetLinkDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p problemProblemSetLinkDo) Joins(fields ...field.RelationField) IProblemProblemSetLinkDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p problemProblemSetLinkDo) Preload(fields ...field.RelationField) IProblemProblemSetLinkDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p problemProblemSetLinkDo) FirstOrInit() (*model.ProblemProblemSetLink, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemProblemSetLink), nil
	}
}

func (p problemProblemSetLinkDo) FirstOrCreate() (*model.ProblemProblemSetLink, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemProblemSetLink), nil
	}
}

func (p problemProblemSetLinkDo) FindByPage(offset int, limit int) (result []*model.ProblemProblemSetLink, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p problemProblemSetLinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p problemProblemSetLinkDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p problemProblemSetLinkDo) Delete(models ...*model.ProblemProblemSetLink) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *problemProblemSetLinkDo) withDO(do gen.Dao) *problemProblemSetLinkDo {
	p.DO = *do.(*gen.DO)
	return p
}
