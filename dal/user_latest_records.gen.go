// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newUserLatestRecord(db *gorm.DB, opts ...gen.DOOption) userLatestRecord {
	_userLatestRecord := userLatestRecord{}

	_userLatestRecord.userLatestRecordDo.UseDB(db, opts...)
	_userLatestRecord.userLatestRecordDo.UseModel(&model.UserLatestRecord{})

	tableName := _userLatestRecord.userLatestRecordDo.TableName()
	_userLatestRecord.ALL = field.NewAsterisk(tableName)
	_userLatestRecord.CreatedAt = field.NewTime(tableName, "created_at")
	_userLatestRecord.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userLatestRecord.UserID = field.NewString(tableName, "user_id")
	_userLatestRecord.ProblemID = field.NewString(tableName, "problem_id")
	_userLatestRecord.ProblemSetID = field.NewString(tableName, "problem_set_id")
	_userLatestRecord.RecordID = field.NewString(tableName, "record_id")
	_userLatestRecord.ID = field.NewString(tableName, "id")

	_userLatestRecord.fillFieldMap()

	return _userLatestRecord
}

type userLatestRecord struct {
	userLatestRecordDo

	ALL          field.Asterisk
	CreatedAt    field.Time
	UpdatedAt    field.Time
	UserID       field.String
	ProblemID    field.String
	ProblemSetID field.String
	RecordID     field.String
	ID           field.String

	fieldMap map[string]field.Expr
}

func (u userLatestRecord) Table(newTableName string) *userLatestRecord {
	u.userLatestRecordDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLatestRecord) As(alias string) *userLatestRecord {
	u.userLatestRecordDo.DO = *(u.userLatestRecordDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLatestRecord) updateTableName(table string) *userLatestRecord {
	u.ALL = field.NewAsterisk(table)
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.UserID = field.NewString(table, "user_id")
	u.ProblemID = field.NewString(table, "problem_id")
	u.ProblemSetID = field.NewString(table, "problem_set_id")
	u.RecordID = field.NewString(table, "record_id")
	u.ID = field.NewString(table, "id")

	u.fillFieldMap()

	return u
}

func (u *userLatestRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLatestRecord) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["problem_id"] = u.ProblemID
	u.fieldMap["problem_set_id"] = u.ProblemSetID
	u.fieldMap["record_id"] = u.RecordID
	u.fieldMap["id"] = u.ID
}

func (u userLatestRecord) clone(db *gorm.DB) userLatestRecord {
	u.userLatestRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLatestRecord) replaceDB(db *gorm.DB) userLatestRecord {
	u.userLatestRecordDo.ReplaceDB(db)
	return u
}

type userLatestRecordDo struct{ gen.DO }

type IUserLatestRecordDo interface {
	gen.SubQuery
	Debug() IUserLatestRecordDo
	WithContext(ctx context.Context) IUserLatestRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLatestRecordDo
	WriteDB() IUserLatestRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLatestRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLatestRecordDo
	Not(conds ...gen.Condition) IUserLatestRecordDo
	Or(conds ...gen.Condition) IUserLatestRecordDo
	Select(conds ...field.Expr) IUserLatestRecordDo
	Where(conds ...gen.Condition) IUserLatestRecordDo
	Order(conds ...field.Expr) IUserLatestRecordDo
	Distinct(cols ...field.Expr) IUserLatestRecordDo
	Omit(cols ...field.Expr) IUserLatestRecordDo
	Join(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo
	Group(cols ...field.Expr) IUserLatestRecordDo
	Having(conds ...gen.Condition) IUserLatestRecordDo
	Limit(limit int) IUserLatestRecordDo
	Offset(offset int) IUserLatestRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLatestRecordDo
	Unscoped() IUserLatestRecordDo
	Create(values ...*model.UserLatestRecord) error
	CreateInBatches(values []*model.UserLatestRecord, batchSize int) error
	Save(values ...*model.UserLatestRecord) error
	First() (*model.UserLatestRecord, error)
	Take() (*model.UserLatestRecord, error)
	Last() (*model.UserLatestRecord, error)
	Find() ([]*model.UserLatestRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLatestRecord, err error)
	FindInBatches(result *[]*model.UserLatestRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLatestRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLatestRecordDo
	Assign(attrs ...field.AssignExpr) IUserLatestRecordDo
	Joins(fields ...field.RelationField) IUserLatestRecordDo
	Preload(fields ...field.RelationField) IUserLatestRecordDo
	FirstOrInit() (*model.UserLatestRecord, error)
	FirstOrCreate() (*model.UserLatestRecord, error)
	FindByPage(offset int, limit int) (result []*model.UserLatestRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLatestRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLatestRecordDo) Debug() IUserLatestRecordDo {
	return u.withDO(u.DO.Debug())
}

func (u userLatestRecordDo) WithContext(ctx context.Context) IUserLatestRecordDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLatestRecordDo) ReadDB() IUserLatestRecordDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLatestRecordDo) WriteDB() IUserLatestRecordDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLatestRecordDo) Session(config *gorm.Session) IUserLatestRecordDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLatestRecordDo) Clauses(conds ...clause.Expression) IUserLatestRecordDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLatestRecordDo) Returning(value interface{}, columns ...string) IUserLatestRecordDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLatestRecordDo) Not(conds ...gen.Condition) IUserLatestRecordDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLatestRecordDo) Or(conds ...gen.Condition) IUserLatestRecordDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLatestRecordDo) Select(conds ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLatestRecordDo) Where(conds ...gen.Condition) IUserLatestRecordDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLatestRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserLatestRecordDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userLatestRecordDo) Order(conds ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLatestRecordDo) Distinct(cols ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLatestRecordDo) Omit(cols ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLatestRecordDo) Join(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLatestRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLatestRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLatestRecordDo) Group(cols ...field.Expr) IUserLatestRecordDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLatestRecordDo) Having(conds ...gen.Condition) IUserLatestRecordDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLatestRecordDo) Limit(limit int) IUserLatestRecordDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLatestRecordDo) Offset(offset int) IUserLatestRecordDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLatestRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLatestRecordDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLatestRecordDo) Unscoped() IUserLatestRecordDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLatestRecordDo) Create(values ...*model.UserLatestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLatestRecordDo) CreateInBatches(values []*model.UserLatestRecord, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLatestRecordDo) Save(values ...*model.UserLatestRecord) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLatestRecordDo) First() (*model.UserLatestRecord, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLatestRecord), nil
	}
}

func (u userLatestRecordDo) Take() (*model.UserLatestRecord, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLatestRecord), nil
	}
}

func (u userLatestRecordDo) Last() (*model.UserLatestRecord, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLatestRecord), nil
	}
}

func (u userLatestRecordDo) Find() ([]*model.UserLatestRecord, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLatestRecord), err
}

func (u userLatestRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLatestRecord, err error) {
	buf := make([]*model.UserLatestRecord, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLatestRecordDo) FindInBatches(result *[]*model.UserLatestRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLatestRecordDo) Attrs(attrs ...field.AssignExpr) IUserLatestRecordDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLatestRecordDo) Assign(attrs ...field.AssignExpr) IUserLatestRecordDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLatestRecordDo) Joins(fields ...field.RelationField) IUserLatestRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLatestRecordDo) Preload(fields ...field.RelationField) IUserLatestRecordDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLatestRecordDo) FirstOrInit() (*model.UserLatestRecord, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLatestRecord), nil
	}
}

func (u userLatestRecordDo) FirstOrCreate() (*model.UserLatestRecord, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLatestRecord), nil
	}
}

func (u userLatestRecordDo) FindByPage(offset int, limit int) (result []*model.UserLatestRecord, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLatestRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLatestRecordDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLatestRecordDo) Delete(models ...*model.UserLatestRecord) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLatestRecordDo) withDO(do gen.Dao) *userLatestRecordDo {
	u.DO = *do.(*gen.DO)
	return u
}
