// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newProblemSet(db *gorm.DB, opts ...gen.DOOption) problemSet {
	_problemSet := problemSet{}

	_problemSet.problemSetDo.UseDB(db, opts...)
	_problemSet.problemSetDo.UseModel(&model.ProblemSet{})

	tableName := _problemSet.problemSetDo.TableName()
	_problemSet.ALL = field.NewAsterisk(tableName)
	_problemSet.CreatedAt = field.NewTime(tableName, "created_at")
	_problemSet.UpdatedAt = field.NewTime(tableName, "updated_at")
	_problemSet.DomainID = field.NewString(tableName, "domain_id")
	_problemSet.OwnerID = field.NewString(tableName, "owner_id")
	_problemSet.ID = field.NewString(tableName, "id")
	_problemSet.URL = field.NewString(tableName, "url")
	_problemSet.Title = field.NewString(tableName, "title")
	_problemSet.Content = field.NewString(tableName, "content")
	_problemSet.Hidden = field.NewBool(tableName, "hidden")
	_problemSet.ScoreboardHidden = field.NewBool(tableName, "scoreboard_hidden")
	_problemSet.NumSubmit = field.NewInt32(tableName, "num_submit")
	_problemSet.NumAccept = field.NewInt32(tableName, "num_accept")
	_problemSet.DueAt = field.NewTime(tableName, "due_at")
	_problemSet.LockAt = field.NewTime(tableName, "lock_at")
	_problemSet.UnlockAt = field.NewTime(tableName, "unlock_at")

	_problemSet.fillFieldMap()

	return _problemSet
}

type problemSet struct {
	problemSetDo

	ALL              field.Asterisk
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DomainID         field.String
	OwnerID          field.String
	ID               field.String
	URL              field.String
	Title            field.String
	Content          field.String
	Hidden           field.Bool
	ScoreboardHidden field.Bool
	NumSubmit        field.Int32
	NumAccept        field.Int32
	DueAt            field.Time
	LockAt           field.Time
	UnlockAt         field.Time

	fieldMap map[string]field.Expr
}

func (p problemSet) Table(newTableName string) *problemSet {
	p.problemSetDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p problemSet) As(alias string) *problemSet {
	p.problemSetDo.DO = *(p.problemSetDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *problemSet) updateTableName(table string) *problemSet {
	p.ALL = field.NewAsterisk(table)
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DomainID = field.NewString(table, "domain_id")
	p.OwnerID = field.NewString(table, "owner_id")
	p.ID = field.NewString(table, "id")
	p.URL = field.NewString(table, "url")
	p.Title = field.NewString(table, "title")
	p.Content = field.NewString(table, "content")
	p.Hidden = field.NewBool(table, "hidden")
	p.ScoreboardHidden = field.NewBool(table, "scoreboard_hidden")
	p.NumSubmit = field.NewInt32(table, "num_submit")
	p.NumAccept = field.NewInt32(table, "num_accept")
	p.DueAt = field.NewTime(table, "due_at")
	p.LockAt = field.NewTime(table, "lock_at")
	p.UnlockAt = field.NewTime(table, "unlock_at")

	p.fillFieldMap()

	return p
}

func (p *problemSet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *problemSet) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 15)
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["domain_id"] = p.DomainID
	p.fieldMap["owner_id"] = p.OwnerID
	p.fieldMap["id"] = p.ID
	p.fieldMap["url"] = p.URL
	p.fieldMap["title"] = p.Title
	p.fieldMap["content"] = p.Content
	p.fieldMap["hidden"] = p.Hidden
	p.fieldMap["scoreboard_hidden"] = p.ScoreboardHidden
	p.fieldMap["num_submit"] = p.NumSubmit
	p.fieldMap["num_accept"] = p.NumAccept
	p.fieldMap["due_at"] = p.DueAt
	p.fieldMap["lock_at"] = p.LockAt
	p.fieldMap["unlock_at"] = p.UnlockAt
}

func (p problemSet) clone(db *gorm.DB) problemSet {
	p.problemSetDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p problemSet) replaceDB(db *gorm.DB) problemSet {
	p.problemSetDo.ReplaceDB(db)
	return p
}

type problemSetDo struct{ gen.DO }

type IProblemSetDo interface {
	gen.SubQuery
	Debug() IProblemSetDo
	WithContext(ctx context.Context) IProblemSetDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProblemSetDo
	WriteDB() IProblemSetDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProblemSetDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProblemSetDo
	Not(conds ...gen.Condition) IProblemSetDo
	Or(conds ...gen.Condition) IProblemSetDo
	Select(conds ...field.Expr) IProblemSetDo
	Where(conds ...gen.Condition) IProblemSetDo
	Order(conds ...field.Expr) IProblemSetDo
	Distinct(cols ...field.Expr) IProblemSetDo
	Omit(cols ...field.Expr) IProblemSetDo
	Join(table schema.Tabler, on ...field.Expr) IProblemSetDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProblemSetDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProblemSetDo
	Group(cols ...field.Expr) IProblemSetDo
	Having(conds ...gen.Condition) IProblemSetDo
	Limit(limit int) IProblemSetDo
	Offset(offset int) IProblemSetDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemSetDo
	Unscoped() IProblemSetDo
	Create(values ...*model.ProblemSet) error
	CreateInBatches(values []*model.ProblemSet, batchSize int) error
	Save(values ...*model.ProblemSet) error
	First() (*model.ProblemSet, error)
	Take() (*model.ProblemSet, error)
	Last() (*model.ProblemSet, error)
	Find() ([]*model.ProblemSet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemSet, err error)
	FindInBatches(result *[]*model.ProblemSet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProblemSet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProblemSetDo
	Assign(attrs ...field.AssignExpr) IProblemSetDo
	Joins(fields ...field.RelationField) IProblemSetDo
	Preload(fields ...field.RelationField) IProblemSetDo
	FirstOrInit() (*model.ProblemSet, error)
	FirstOrCreate() (*model.ProblemSet, error)
	FindByPage(offset int, limit int) (result []*model.ProblemSet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProblemSetDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p problemSetDo) Debug() IProblemSetDo {
	return p.withDO(p.DO.Debug())
}

func (p problemSetDo) WithContext(ctx context.Context) IProblemSetDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p problemSetDo) ReadDB() IProblemSetDo {
	return p.Clauses(dbresolver.Read)
}

func (p problemSetDo) WriteDB() IProblemSetDo {
	return p.Clauses(dbresolver.Write)
}

func (p problemSetDo) Session(config *gorm.Session) IProblemSetDo {
	return p.withDO(p.DO.Session(config))
}

func (p problemSetDo) Clauses(conds ...clause.Expression) IProblemSetDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p problemSetDo) Returning(value interface{}, columns ...string) IProblemSetDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p problemSetDo) Not(conds ...gen.Condition) IProblemSetDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p problemSetDo) Or(conds ...gen.Condition) IProblemSetDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p problemSetDo) Select(conds ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p problemSetDo) Where(conds ...gen.Condition) IProblemSetDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p problemSetDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProblemSetDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p problemSetDo) Order(conds ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p problemSetDo) Distinct(cols ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p problemSetDo) Omit(cols ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p problemSetDo) Join(table schema.Tabler, on ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p problemSetDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p problemSetDo) RightJoin(table schema.Tabler, on ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p problemSetDo) Group(cols ...field.Expr) IProblemSetDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p problemSetDo) Having(conds ...gen.Condition) IProblemSetDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p problemSetDo) Limit(limit int) IProblemSetDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p problemSetDo) Offset(offset int) IProblemSetDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p problemSetDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemSetDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p problemSetDo) Unscoped() IProblemSetDo {
	return p.withDO(p.DO.Unscoped())
}

func (p problemSetDo) Create(values ...*model.ProblemSet) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p problemSetDo) CreateInBatches(values []*model.ProblemSet, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p problemSetDo) Save(values ...*model.ProblemSet) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p problemSetDo) First() (*model.ProblemSet, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemSet), nil
	}
}

func (p problemSetDo) Take() (*model.ProblemSet, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemSet), nil
	}
}

func (p problemSetDo) Last() (*model.ProblemSet, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemSet), nil
	}
}

func (p problemSetDo) Find() ([]*model.ProblemSet, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProblemSet), err
}

func (p problemSetDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemSet, err error) {
	buf := make([]*model.ProblemSet, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p problemSetDo) FindInBatches(result *[]*model.ProblemSet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p problemSetDo) Attrs(attrs ...field.AssignExpr) IProblemSetDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p problemSetDo) Assign(attrs ...field.AssignExpr) IProblemSetDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p problemSetDo) Joins(fields ...field.RelationField) IProblemSetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p problemSetDo) Preload(fields ...field.RelationField) IProblemSetDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p problemSetDo) FirstOrInit() (*model.ProblemSet, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemSet), nil
	}
}

func (p problemSetDo) FirstOrCreate() (*model.ProblemSet, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemSet), nil
	}
}

func (p problemSetDo) FindByPage(offset int, limit int) (result []*model.ProblemSet, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p problemSetDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p problemSetDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p problemSetDo) Delete(models ...*model.ProblemSet) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *problemSetDo) withDO(do gen.Dao) *problemSetDo {
	p.DO = *do.(*gen.DO)
	return p
}
