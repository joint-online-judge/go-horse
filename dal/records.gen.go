// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newRecord(db *gorm.DB, opts ...gen.DOOption) record {
	_record := record{}

	_record.recordDo.UseDB(db, opts...)
	_record.recordDo.UseModel(&model.Record{})

	tableName := _record.recordDo.TableName()
	_record.ALL = field.NewAsterisk(tableName)
	_record.CreatedAt = field.NewTime(tableName, "created_at")
	_record.UpdatedAt = field.NewTime(tableName, "updated_at")
	_record.ProblemSetID = field.NewString(tableName, "problem_set_id")
	_record.ProblemID = field.NewString(tableName, "problem_id")
	_record.ID = field.NewString(tableName, "id")
	_record.Score = field.NewInt32(tableName, "score")
	_record.TimeMs = field.NewInt32(tableName, "time_ms")
	_record.MemoryKb = field.NewInt32(tableName, "memory_kb")
	_record.CommitID = field.NewString(tableName, "commit_id")
	_record.ProblemConfigID = field.NewString(tableName, "problem_config_id")
	_record.CommitterID = field.NewString(tableName, "committer_id")
	_record.JudgerID = field.NewString(tableName, "judger_id")
	_record.State = field.NewString(tableName, "state")
	_record.Language = field.NewString(tableName, "language")
	_record.TaskID = field.NewString(tableName, "task_id")
	_record.Cases = field.NewString(tableName, "cases")
	_record.DomainID = field.NewString(tableName, "domain_id")
	_record.JudgedAt = field.NewTime(tableName, "judged_at")

	_record.fillFieldMap()

	return _record
}

type record struct {
	recordDo

	ALL             field.Asterisk
	CreatedAt       field.Time
	UpdatedAt       field.Time
	ProblemSetID    field.String
	ProblemID       field.String
	ID              field.String
	Score           field.Int32
	TimeMs          field.Int32
	MemoryKb        field.Int32
	CommitID        field.String
	ProblemConfigID field.String
	CommitterID     field.String
	JudgerID        field.String
	State           field.String
	Language        field.String
	TaskID          field.String
	Cases           field.String
	DomainID        field.String
	JudgedAt        field.Time

	fieldMap map[string]field.Expr
}

func (r record) Table(newTableName string) *record {
	r.recordDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r record) As(alias string) *record {
	r.recordDo.DO = *(r.recordDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *record) updateTableName(table string) *record {
	r.ALL = field.NewAsterisk(table)
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")
	r.ProblemSetID = field.NewString(table, "problem_set_id")
	r.ProblemID = field.NewString(table, "problem_id")
	r.ID = field.NewString(table, "id")
	r.Score = field.NewInt32(table, "score")
	r.TimeMs = field.NewInt32(table, "time_ms")
	r.MemoryKb = field.NewInt32(table, "memory_kb")
	r.CommitID = field.NewString(table, "commit_id")
	r.ProblemConfigID = field.NewString(table, "problem_config_id")
	r.CommitterID = field.NewString(table, "committer_id")
	r.JudgerID = field.NewString(table, "judger_id")
	r.State = field.NewString(table, "state")
	r.Language = field.NewString(table, "language")
	r.TaskID = field.NewString(table, "task_id")
	r.Cases = field.NewString(table, "cases")
	r.DomainID = field.NewString(table, "domain_id")
	r.JudgedAt = field.NewTime(table, "judged_at")

	r.fillFieldMap()

	return r
}

func (r *record) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *record) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 18)
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
	r.fieldMap["problem_set_id"] = r.ProblemSetID
	r.fieldMap["problem_id"] = r.ProblemID
	r.fieldMap["id"] = r.ID
	r.fieldMap["score"] = r.Score
	r.fieldMap["time_ms"] = r.TimeMs
	r.fieldMap["memory_kb"] = r.MemoryKb
	r.fieldMap["commit_id"] = r.CommitID
	r.fieldMap["problem_config_id"] = r.ProblemConfigID
	r.fieldMap["committer_id"] = r.CommitterID
	r.fieldMap["judger_id"] = r.JudgerID
	r.fieldMap["state"] = r.State
	r.fieldMap["language"] = r.Language
	r.fieldMap["task_id"] = r.TaskID
	r.fieldMap["cases"] = r.Cases
	r.fieldMap["domain_id"] = r.DomainID
	r.fieldMap["judged_at"] = r.JudgedAt
}

func (r record) clone(db *gorm.DB) record {
	r.recordDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r record) replaceDB(db *gorm.DB) record {
	r.recordDo.ReplaceDB(db)
	return r
}

type recordDo struct{ gen.DO }

type IRecordDo interface {
	gen.SubQuery
	Debug() IRecordDo
	WithContext(ctx context.Context) IRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecordDo
	WriteDB() IRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecordDo
	Not(conds ...gen.Condition) IRecordDo
	Or(conds ...gen.Condition) IRecordDo
	Select(conds ...field.Expr) IRecordDo
	Where(conds ...gen.Condition) IRecordDo
	Order(conds ...field.Expr) IRecordDo
	Distinct(cols ...field.Expr) IRecordDo
	Omit(cols ...field.Expr) IRecordDo
	Join(table schema.Tabler, on ...field.Expr) IRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecordDo
	Group(cols ...field.Expr) IRecordDo
	Having(conds ...gen.Condition) IRecordDo
	Limit(limit int) IRecordDo
	Offset(offset int) IRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordDo
	Unscoped() IRecordDo
	Create(values ...*model.Record) error
	CreateInBatches(values []*model.Record, batchSize int) error
	Save(values ...*model.Record) error
	First() (*model.Record, error)
	Take() (*model.Record, error)
	Last() (*model.Record, error)
	Find() ([]*model.Record, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Record, err error)
	FindInBatches(result *[]*model.Record, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Record) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecordDo
	Assign(attrs ...field.AssignExpr) IRecordDo
	Joins(fields ...field.RelationField) IRecordDo
	Preload(fields ...field.RelationField) IRecordDo
	FirstOrInit() (*model.Record, error)
	FirstOrCreate() (*model.Record, error)
	FindByPage(offset int, limit int) (result []*model.Record, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recordDo) Debug() IRecordDo {
	return r.withDO(r.DO.Debug())
}

func (r recordDo) WithContext(ctx context.Context) IRecordDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recordDo) ReadDB() IRecordDo {
	return r.Clauses(dbresolver.Read)
}

func (r recordDo) WriteDB() IRecordDo {
	return r.Clauses(dbresolver.Write)
}

func (r recordDo) Session(config *gorm.Session) IRecordDo {
	return r.withDO(r.DO.Session(config))
}

func (r recordDo) Clauses(conds ...clause.Expression) IRecordDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recordDo) Returning(value interface{}, columns ...string) IRecordDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recordDo) Not(conds ...gen.Condition) IRecordDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recordDo) Or(conds ...gen.Condition) IRecordDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recordDo) Select(conds ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recordDo) Where(conds ...gen.Condition) IRecordDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecordDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recordDo) Order(conds ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recordDo) Distinct(cols ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recordDo) Omit(cols ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recordDo) Join(table schema.Tabler, on ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecordDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recordDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecordDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recordDo) Group(cols ...field.Expr) IRecordDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recordDo) Having(conds ...gen.Condition) IRecordDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recordDo) Limit(limit int) IRecordDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recordDo) Offset(offset int) IRecordDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecordDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recordDo) Unscoped() IRecordDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recordDo) Create(values ...*model.Record) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recordDo) CreateInBatches(values []*model.Record, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recordDo) Save(values ...*model.Record) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recordDo) First() (*model.Record, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Take() (*model.Record, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Last() (*model.Record, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) Find() ([]*model.Record, error) {
	result, err := r.DO.Find()
	return result.([]*model.Record), err
}

func (r recordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Record, err error) {
	buf := make([]*model.Record, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recordDo) FindInBatches(result *[]*model.Record, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recordDo) Attrs(attrs ...field.AssignExpr) IRecordDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recordDo) Assign(attrs ...field.AssignExpr) IRecordDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recordDo) Joins(fields ...field.RelationField) IRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recordDo) Preload(fields ...field.RelationField) IRecordDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recordDo) FirstOrInit() (*model.Record, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) FirstOrCreate() (*model.Record, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Record), nil
	}
}

func (r recordDo) FindByPage(offset int, limit int) (result []*model.Record, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recordDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recordDo) Delete(models ...*model.Record) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recordDo) withDO(do gen.Dao) *recordDo {
	r.DO = *do.(*gen.DO)
	return r
}
