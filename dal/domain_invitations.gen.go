// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newDomainInvitation(db *gorm.DB, opts ...gen.DOOption) domainInvitation {
	_domainInvitation := domainInvitation{}

	_domainInvitation.domainInvitationDo.UseDB(db, opts...)
	_domainInvitation.domainInvitationDo.UseModel(&model.DomainInvitation{})

	tableName := _domainInvitation.domainInvitationDo.TableName()
	_domainInvitation.ALL = field.NewAsterisk(tableName)
	_domainInvitation.CreatedAt = field.NewTime(tableName, "created_at")
	_domainInvitation.UpdatedAt = field.NewTime(tableName, "updated_at")
	_domainInvitation.ExpireAt = field.NewTime(tableName, "expire_at")
	_domainInvitation.DomainID = field.NewString(tableName, "domain_id")
	_domainInvitation.URL = field.NewString(tableName, "url")
	_domainInvitation.Code = field.NewString(tableName, "code")
	_domainInvitation.Role = field.NewString(tableName, "role")
	_domainInvitation.ID = field.NewString(tableName, "id")

	_domainInvitation.fillFieldMap()

	return _domainInvitation
}

type domainInvitation struct {
	domainInvitationDo

	ALL       field.Asterisk
	CreatedAt field.Time
	UpdatedAt field.Time
	ExpireAt  field.Time
	DomainID  field.String
	URL       field.String
	Code      field.String
	Role      field.String
	ID        field.String

	fieldMap map[string]field.Expr
}

func (d domainInvitation) Table(newTableName string) *domainInvitation {
	d.domainInvitationDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domainInvitation) As(alias string) *domainInvitation {
	d.domainInvitationDo.DO = *(d.domainInvitationDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domainInvitation) updateTableName(table string) *domainInvitation {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.ExpireAt = field.NewTime(table, "expire_at")
	d.DomainID = field.NewString(table, "domain_id")
	d.URL = field.NewString(table, "url")
	d.Code = field.NewString(table, "code")
	d.Role = field.NewString(table, "role")
	d.ID = field.NewString(table, "id")

	d.fillFieldMap()

	return d
}

func (d *domainInvitation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domainInvitation) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 8)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["expire_at"] = d.ExpireAt
	d.fieldMap["domain_id"] = d.DomainID
	d.fieldMap["url"] = d.URL
	d.fieldMap["code"] = d.Code
	d.fieldMap["role"] = d.Role
	d.fieldMap["id"] = d.ID
}

func (d domainInvitation) clone(db *gorm.DB) domainInvitation {
	d.domainInvitationDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domainInvitation) replaceDB(db *gorm.DB) domainInvitation {
	d.domainInvitationDo.ReplaceDB(db)
	return d
}

type domainInvitationDo struct{ gen.DO }

type IDomainInvitationDo interface {
	gen.SubQuery
	Debug() IDomainInvitationDo
	WithContext(ctx context.Context) IDomainInvitationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDomainInvitationDo
	WriteDB() IDomainInvitationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDomainInvitationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDomainInvitationDo
	Not(conds ...gen.Condition) IDomainInvitationDo
	Or(conds ...gen.Condition) IDomainInvitationDo
	Select(conds ...field.Expr) IDomainInvitationDo
	Where(conds ...gen.Condition) IDomainInvitationDo
	Order(conds ...field.Expr) IDomainInvitationDo
	Distinct(cols ...field.Expr) IDomainInvitationDo
	Omit(cols ...field.Expr) IDomainInvitationDo
	Join(table schema.Tabler, on ...field.Expr) IDomainInvitationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDomainInvitationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDomainInvitationDo
	Group(cols ...field.Expr) IDomainInvitationDo
	Having(conds ...gen.Condition) IDomainInvitationDo
	Limit(limit int) IDomainInvitationDo
	Offset(offset int) IDomainInvitationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainInvitationDo
	Unscoped() IDomainInvitationDo
	Create(values ...*model.DomainInvitation) error
	CreateInBatches(values []*model.DomainInvitation, batchSize int) error
	Save(values ...*model.DomainInvitation) error
	First() (*model.DomainInvitation, error)
	Take() (*model.DomainInvitation, error)
	Last() (*model.DomainInvitation, error)
	Find() ([]*model.DomainInvitation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainInvitation, err error)
	FindInBatches(result *[]*model.DomainInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DomainInvitation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDomainInvitationDo
	Assign(attrs ...field.AssignExpr) IDomainInvitationDo
	Joins(fields ...field.RelationField) IDomainInvitationDo
	Preload(fields ...field.RelationField) IDomainInvitationDo
	FirstOrInit() (*model.DomainInvitation, error)
	FirstOrCreate() (*model.DomainInvitation, error)
	FindByPage(offset int, limit int) (result []*model.DomainInvitation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDomainInvitationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d domainInvitationDo) Debug() IDomainInvitationDo {
	return d.withDO(d.DO.Debug())
}

func (d domainInvitationDo) WithContext(ctx context.Context) IDomainInvitationDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainInvitationDo) ReadDB() IDomainInvitationDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainInvitationDo) WriteDB() IDomainInvitationDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainInvitationDo) Session(config *gorm.Session) IDomainInvitationDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainInvitationDo) Clauses(conds ...clause.Expression) IDomainInvitationDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainInvitationDo) Returning(value interface{}, columns ...string) IDomainInvitationDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainInvitationDo) Not(conds ...gen.Condition) IDomainInvitationDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainInvitationDo) Or(conds ...gen.Condition) IDomainInvitationDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainInvitationDo) Select(conds ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainInvitationDo) Where(conds ...gen.Condition) IDomainInvitationDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainInvitationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDomainInvitationDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d domainInvitationDo) Order(conds ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainInvitationDo) Distinct(cols ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainInvitationDo) Omit(cols ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainInvitationDo) Join(table schema.Tabler, on ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainInvitationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainInvitationDo) RightJoin(table schema.Tabler, on ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainInvitationDo) Group(cols ...field.Expr) IDomainInvitationDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainInvitationDo) Having(conds ...gen.Condition) IDomainInvitationDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainInvitationDo) Limit(limit int) IDomainInvitationDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainInvitationDo) Offset(offset int) IDomainInvitationDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainInvitationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainInvitationDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainInvitationDo) Unscoped() IDomainInvitationDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainInvitationDo) Create(values ...*model.DomainInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainInvitationDo) CreateInBatches(values []*model.DomainInvitation, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainInvitationDo) Save(values ...*model.DomainInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainInvitationDo) First() (*model.DomainInvitation, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainInvitation), nil
	}
}

func (d domainInvitationDo) Take() (*model.DomainInvitation, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainInvitation), nil
	}
}

func (d domainInvitationDo) Last() (*model.DomainInvitation, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainInvitation), nil
	}
}

func (d domainInvitationDo) Find() ([]*model.DomainInvitation, error) {
	result, err := d.DO.Find()
	return result.([]*model.DomainInvitation), err
}

func (d domainInvitationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainInvitation, err error) {
	buf := make([]*model.DomainInvitation, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainInvitationDo) FindInBatches(result *[]*model.DomainInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainInvitationDo) Attrs(attrs ...field.AssignExpr) IDomainInvitationDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainInvitationDo) Assign(attrs ...field.AssignExpr) IDomainInvitationDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainInvitationDo) Joins(fields ...field.RelationField) IDomainInvitationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainInvitationDo) Preload(fields ...field.RelationField) IDomainInvitationDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainInvitationDo) FirstOrInit() (*model.DomainInvitation, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainInvitation), nil
	}
}

func (d domainInvitationDo) FirstOrCreate() (*model.DomainInvitation, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainInvitation), nil
	}
}

func (d domainInvitationDo) FindByPage(offset int, limit int) (result []*model.DomainInvitation, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainInvitationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainInvitationDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainInvitationDo) Delete(models ...*model.DomainInvitation) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainInvitationDo) withDO(do gen.Dao) *domainInvitationDo {
	d.DO = *do.(*gen.DO)
	return d
}
