// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newProblemConfig(db *gorm.DB, opts ...gen.DOOption) problemConfig {
	_problemConfig := problemConfig{}

	_problemConfig.problemConfigDo.UseDB(db, opts...)
	_problemConfig.problemConfigDo.UseModel(&model.ProblemConfig{})

	tableName := _problemConfig.problemConfigDo.TableName()
	_problemConfig.ALL = field.NewAsterisk(tableName)
	_problemConfig.CreatedAt = field.NewTime(tableName, "created_at")
	_problemConfig.UpdatedAt = field.NewTime(tableName, "updated_at")
	_problemConfig.ProblemID = field.NewString(tableName, "problem_id")
	_problemConfig.CommitterID = field.NewString(tableName, "committer_id")
	_problemConfig.ID = field.NewString(tableName, "id")
	_problemConfig.CommitID = field.NewString(tableName, "commit_id")
	_problemConfig.DataVersion = field.NewInt32(tableName, "data_version")
	_problemConfig.CommitMessage = field.NewString(tableName, "commit_message")

	_problemConfig.fillFieldMap()

	return _problemConfig
}

type problemConfig struct {
	problemConfigDo

	ALL           field.Asterisk
	CreatedAt     field.Time
	UpdatedAt     field.Time
	ProblemID     field.String
	CommitterID   field.String
	ID            field.String
	CommitID      field.String
	DataVersion   field.Int32
	CommitMessage field.String

	fieldMap map[string]field.Expr
}

func (p problemConfig) Table(newTableName string) *problemConfig {
	p.problemConfigDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p problemConfig) As(alias string) *problemConfig {
	p.problemConfigDo.DO = *(p.problemConfigDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *problemConfig) updateTableName(table string) *problemConfig {
	p.ALL = field.NewAsterisk(table)
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.ProblemID = field.NewString(table, "problem_id")
	p.CommitterID = field.NewString(table, "committer_id")
	p.ID = field.NewString(table, "id")
	p.CommitID = field.NewString(table, "commit_id")
	p.DataVersion = field.NewInt32(table, "data_version")
	p.CommitMessage = field.NewString(table, "commit_message")

	p.fillFieldMap()

	return p
}

func (p *problemConfig) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *problemConfig) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["problem_id"] = p.ProblemID
	p.fieldMap["committer_id"] = p.CommitterID
	p.fieldMap["id"] = p.ID
	p.fieldMap["commit_id"] = p.CommitID
	p.fieldMap["data_version"] = p.DataVersion
	p.fieldMap["commit_message"] = p.CommitMessage
}

func (p problemConfig) clone(db *gorm.DB) problemConfig {
	p.problemConfigDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p problemConfig) replaceDB(db *gorm.DB) problemConfig {
	p.problemConfigDo.ReplaceDB(db)
	return p
}

type problemConfigDo struct{ gen.DO }

type IProblemConfigDo interface {
	gen.SubQuery
	Debug() IProblemConfigDo
	WithContext(ctx context.Context) IProblemConfigDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProblemConfigDo
	WriteDB() IProblemConfigDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProblemConfigDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProblemConfigDo
	Not(conds ...gen.Condition) IProblemConfigDo
	Or(conds ...gen.Condition) IProblemConfigDo
	Select(conds ...field.Expr) IProblemConfigDo
	Where(conds ...gen.Condition) IProblemConfigDo
	Order(conds ...field.Expr) IProblemConfigDo
	Distinct(cols ...field.Expr) IProblemConfigDo
	Omit(cols ...field.Expr) IProblemConfigDo
	Join(table schema.Tabler, on ...field.Expr) IProblemConfigDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProblemConfigDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProblemConfigDo
	Group(cols ...field.Expr) IProblemConfigDo
	Having(conds ...gen.Condition) IProblemConfigDo
	Limit(limit int) IProblemConfigDo
	Offset(offset int) IProblemConfigDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemConfigDo
	Unscoped() IProblemConfigDo
	Create(values ...*model.ProblemConfig) error
	CreateInBatches(values []*model.ProblemConfig, batchSize int) error
	Save(values ...*model.ProblemConfig) error
	First() (*model.ProblemConfig, error)
	Take() (*model.ProblemConfig, error)
	Last() (*model.ProblemConfig, error)
	Find() ([]*model.ProblemConfig, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemConfig, err error)
	FindInBatches(result *[]*model.ProblemConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProblemConfig) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProblemConfigDo
	Assign(attrs ...field.AssignExpr) IProblemConfigDo
	Joins(fields ...field.RelationField) IProblemConfigDo
	Preload(fields ...field.RelationField) IProblemConfigDo
	FirstOrInit() (*model.ProblemConfig, error)
	FirstOrCreate() (*model.ProblemConfig, error)
	FindByPage(offset int, limit int) (result []*model.ProblemConfig, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProblemConfigDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p problemConfigDo) Debug() IProblemConfigDo {
	return p.withDO(p.DO.Debug())
}

func (p problemConfigDo) WithContext(ctx context.Context) IProblemConfigDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p problemConfigDo) ReadDB() IProblemConfigDo {
	return p.Clauses(dbresolver.Read)
}

func (p problemConfigDo) WriteDB() IProblemConfigDo {
	return p.Clauses(dbresolver.Write)
}

func (p problemConfigDo) Session(config *gorm.Session) IProblemConfigDo {
	return p.withDO(p.DO.Session(config))
}

func (p problemConfigDo) Clauses(conds ...clause.Expression) IProblemConfigDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p problemConfigDo) Returning(value interface{}, columns ...string) IProblemConfigDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p problemConfigDo) Not(conds ...gen.Condition) IProblemConfigDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p problemConfigDo) Or(conds ...gen.Condition) IProblemConfigDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p problemConfigDo) Select(conds ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p problemConfigDo) Where(conds ...gen.Condition) IProblemConfigDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p problemConfigDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProblemConfigDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p problemConfigDo) Order(conds ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p problemConfigDo) Distinct(cols ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p problemConfigDo) Omit(cols ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p problemConfigDo) Join(table schema.Tabler, on ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p problemConfigDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p problemConfigDo) RightJoin(table schema.Tabler, on ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p problemConfigDo) Group(cols ...field.Expr) IProblemConfigDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p problemConfigDo) Having(conds ...gen.Condition) IProblemConfigDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p problemConfigDo) Limit(limit int) IProblemConfigDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p problemConfigDo) Offset(offset int) IProblemConfigDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p problemConfigDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemConfigDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p problemConfigDo) Unscoped() IProblemConfigDo {
	return p.withDO(p.DO.Unscoped())
}

func (p problemConfigDo) Create(values ...*model.ProblemConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p problemConfigDo) CreateInBatches(values []*model.ProblemConfig, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p problemConfigDo) Save(values ...*model.ProblemConfig) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p problemConfigDo) First() (*model.ProblemConfig, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemConfig), nil
	}
}

func (p problemConfigDo) Take() (*model.ProblemConfig, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemConfig), nil
	}
}

func (p problemConfigDo) Last() (*model.ProblemConfig, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemConfig), nil
	}
}

func (p problemConfigDo) Find() ([]*model.ProblemConfig, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProblemConfig), err
}

func (p problemConfigDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemConfig, err error) {
	buf := make([]*model.ProblemConfig, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p problemConfigDo) FindInBatches(result *[]*model.ProblemConfig, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p problemConfigDo) Attrs(attrs ...field.AssignExpr) IProblemConfigDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p problemConfigDo) Assign(attrs ...field.AssignExpr) IProblemConfigDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p problemConfigDo) Joins(fields ...field.RelationField) IProblemConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p problemConfigDo) Preload(fields ...field.RelationField) IProblemConfigDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p problemConfigDo) FirstOrInit() (*model.ProblemConfig, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemConfig), nil
	}
}

func (p problemConfigDo) FirstOrCreate() (*model.ProblemConfig, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemConfig), nil
	}
}

func (p problemConfigDo) FindByPage(offset int, limit int) (result []*model.ProblemConfig, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p problemConfigDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p problemConfigDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p problemConfigDo) Delete(models ...*model.ProblemConfig) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *problemConfigDo) withDO(do gen.Dao) *problemConfigDo {
	p.DO = *do.(*gen.DO)
	return p
}
