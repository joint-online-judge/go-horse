// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newProblemGroup(db *gorm.DB, opts ...gen.DOOption) problemGroup {
	_problemGroup := problemGroup{}

	_problemGroup.problemGroupDo.UseDB(db, opts...)
	_problemGroup.problemGroupDo.UseModel(&model.ProblemGroup{})

	tableName := _problemGroup.problemGroupDo.TableName()
	_problemGroup.ALL = field.NewAsterisk(tableName)
	_problemGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_problemGroup.UpdatedAt = field.NewTime(tableName, "updated_at")
	_problemGroup.ID = field.NewString(tableName, "id")

	_problemGroup.fillFieldMap()

	return _problemGroup
}

type problemGroup struct {
	problemGroupDo

	ALL       field.Asterisk
	CreatedAt field.Time
	UpdatedAt field.Time
	ID        field.String

	fieldMap map[string]field.Expr
}

func (p problemGroup) Table(newTableName string) *problemGroup {
	p.problemGroupDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p problemGroup) As(alias string) *problemGroup {
	p.problemGroupDo.DO = *(p.problemGroupDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *problemGroup) updateTableName(table string) *problemGroup {
	p.ALL = field.NewAsterisk(table)
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.ID = field.NewString(table, "id")

	p.fillFieldMap()

	return p
}

func (p *problemGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *problemGroup) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["id"] = p.ID
}

func (p problemGroup) clone(db *gorm.DB) problemGroup {
	p.problemGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p problemGroup) replaceDB(db *gorm.DB) problemGroup {
	p.problemGroupDo.ReplaceDB(db)
	return p
}

type problemGroupDo struct{ gen.DO }

type IProblemGroupDo interface {
	gen.SubQuery
	Debug() IProblemGroupDo
	WithContext(ctx context.Context) IProblemGroupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProblemGroupDo
	WriteDB() IProblemGroupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProblemGroupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProblemGroupDo
	Not(conds ...gen.Condition) IProblemGroupDo
	Or(conds ...gen.Condition) IProblemGroupDo
	Select(conds ...field.Expr) IProblemGroupDo
	Where(conds ...gen.Condition) IProblemGroupDo
	Order(conds ...field.Expr) IProblemGroupDo
	Distinct(cols ...field.Expr) IProblemGroupDo
	Omit(cols ...field.Expr) IProblemGroupDo
	Join(table schema.Tabler, on ...field.Expr) IProblemGroupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProblemGroupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProblemGroupDo
	Group(cols ...field.Expr) IProblemGroupDo
	Having(conds ...gen.Condition) IProblemGroupDo
	Limit(limit int) IProblemGroupDo
	Offset(offset int) IProblemGroupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemGroupDo
	Unscoped() IProblemGroupDo
	Create(values ...*model.ProblemGroup) error
	CreateInBatches(values []*model.ProblemGroup, batchSize int) error
	Save(values ...*model.ProblemGroup) error
	First() (*model.ProblemGroup, error)
	Take() (*model.ProblemGroup, error)
	Last() (*model.ProblemGroup, error)
	Find() ([]*model.ProblemGroup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemGroup, err error)
	FindInBatches(result *[]*model.ProblemGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProblemGroup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProblemGroupDo
	Assign(attrs ...field.AssignExpr) IProblemGroupDo
	Joins(fields ...field.RelationField) IProblemGroupDo
	Preload(fields ...field.RelationField) IProblemGroupDo
	FirstOrInit() (*model.ProblemGroup, error)
	FirstOrCreate() (*model.ProblemGroup, error)
	FindByPage(offset int, limit int) (result []*model.ProblemGroup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProblemGroupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p problemGroupDo) Debug() IProblemGroupDo {
	return p.withDO(p.DO.Debug())
}

func (p problemGroupDo) WithContext(ctx context.Context) IProblemGroupDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p problemGroupDo) ReadDB() IProblemGroupDo {
	return p.Clauses(dbresolver.Read)
}

func (p problemGroupDo) WriteDB() IProblemGroupDo {
	return p.Clauses(dbresolver.Write)
}

func (p problemGroupDo) Session(config *gorm.Session) IProblemGroupDo {
	return p.withDO(p.DO.Session(config))
}

func (p problemGroupDo) Clauses(conds ...clause.Expression) IProblemGroupDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p problemGroupDo) Returning(value interface{}, columns ...string) IProblemGroupDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p problemGroupDo) Not(conds ...gen.Condition) IProblemGroupDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p problemGroupDo) Or(conds ...gen.Condition) IProblemGroupDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p problemGroupDo) Select(conds ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p problemGroupDo) Where(conds ...gen.Condition) IProblemGroupDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p problemGroupDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IProblemGroupDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p problemGroupDo) Order(conds ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p problemGroupDo) Distinct(cols ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p problemGroupDo) Omit(cols ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p problemGroupDo) Join(table schema.Tabler, on ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p problemGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p problemGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p problemGroupDo) Group(cols ...field.Expr) IProblemGroupDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p problemGroupDo) Having(conds ...gen.Condition) IProblemGroupDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p problemGroupDo) Limit(limit int) IProblemGroupDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p problemGroupDo) Offset(offset int) IProblemGroupDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p problemGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProblemGroupDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p problemGroupDo) Unscoped() IProblemGroupDo {
	return p.withDO(p.DO.Unscoped())
}

func (p problemGroupDo) Create(values ...*model.ProblemGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p problemGroupDo) CreateInBatches(values []*model.ProblemGroup, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p problemGroupDo) Save(values ...*model.ProblemGroup) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p problemGroupDo) First() (*model.ProblemGroup, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemGroup), nil
	}
}

func (p problemGroupDo) Take() (*model.ProblemGroup, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemGroup), nil
	}
}

func (p problemGroupDo) Last() (*model.ProblemGroup, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemGroup), nil
	}
}

func (p problemGroupDo) Find() ([]*model.ProblemGroup, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProblemGroup), err
}

func (p problemGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProblemGroup, err error) {
	buf := make([]*model.ProblemGroup, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p problemGroupDo) FindInBatches(result *[]*model.ProblemGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p problemGroupDo) Attrs(attrs ...field.AssignExpr) IProblemGroupDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p problemGroupDo) Assign(attrs ...field.AssignExpr) IProblemGroupDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p problemGroupDo) Joins(fields ...field.RelationField) IProblemGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p problemGroupDo) Preload(fields ...field.RelationField) IProblemGroupDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p problemGroupDo) FirstOrInit() (*model.ProblemGroup, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemGroup), nil
	}
}

func (p problemGroupDo) FirstOrCreate() (*model.ProblemGroup, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProblemGroup), nil
	}
}

func (p problemGroupDo) FindByPage(offset int, limit int) (result []*model.ProblemGroup, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p problemGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p problemGroupDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p problemGroupDo) Delete(models ...*model.ProblemGroup) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *problemGroupDo) withDO(do gen.Dao) *problemGroupDo {
	p.DO = *do.(*gen.DO)
	return p
}
