// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/joint-online-judge/go-horse/model"
)

func newDomainRole(db *gorm.DB, opts ...gen.DOOption) domainRole {
	_domainRole := domainRole{}

	_domainRole.domainRoleDo.UseDB(db, opts...)
	_domainRole.domainRoleDo.UseModel(&model.DomainRole{})

	tableName := _domainRole.domainRoleDo.TableName()
	_domainRole.ALL = field.NewAsterisk(tableName)
	_domainRole.CreatedAt = field.NewTime(tableName, "created_at")
	_domainRole.UpdatedAt = field.NewTime(tableName, "updated_at")
	_domainRole.Permission = field.NewString(tableName, "permission")
	_domainRole.DomainID = field.NewString(tableName, "domain_id")
	_domainRole.ID = field.NewString(tableName, "id")
	_domainRole.Role = field.NewString(tableName, "role")

	_domainRole.fillFieldMap()

	return _domainRole
}

type domainRole struct {
	domainRoleDo

	ALL        field.Asterisk
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Permission field.String
	DomainID   field.String
	ID         field.String
	Role       field.String

	fieldMap map[string]field.Expr
}

func (d domainRole) Table(newTableName string) *domainRole {
	d.domainRoleDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d domainRole) As(alias string) *domainRole {
	d.domainRoleDo.DO = *(d.domainRoleDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *domainRole) updateTableName(table string) *domainRole {
	d.ALL = field.NewAsterisk(table)
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.Permission = field.NewString(table, "permission")
	d.DomainID = field.NewString(table, "domain_id")
	d.ID = field.NewString(table, "id")
	d.Role = field.NewString(table, "role")

	d.fillFieldMap()

	return d
}

func (d *domainRole) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *domainRole) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["permission"] = d.Permission
	d.fieldMap["domain_id"] = d.DomainID
	d.fieldMap["id"] = d.ID
	d.fieldMap["role"] = d.Role
}

func (d domainRole) clone(db *gorm.DB) domainRole {
	d.domainRoleDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d domainRole) replaceDB(db *gorm.DB) domainRole {
	d.domainRoleDo.ReplaceDB(db)
	return d
}

type domainRoleDo struct{ gen.DO }

type IDomainRoleDo interface {
	gen.SubQuery
	Debug() IDomainRoleDo
	WithContext(ctx context.Context) IDomainRoleDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDomainRoleDo
	WriteDB() IDomainRoleDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDomainRoleDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDomainRoleDo
	Not(conds ...gen.Condition) IDomainRoleDo
	Or(conds ...gen.Condition) IDomainRoleDo
	Select(conds ...field.Expr) IDomainRoleDo
	Where(conds ...gen.Condition) IDomainRoleDo
	Order(conds ...field.Expr) IDomainRoleDo
	Distinct(cols ...field.Expr) IDomainRoleDo
	Omit(cols ...field.Expr) IDomainRoleDo
	Join(table schema.Tabler, on ...field.Expr) IDomainRoleDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDomainRoleDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDomainRoleDo
	Group(cols ...field.Expr) IDomainRoleDo
	Having(conds ...gen.Condition) IDomainRoleDo
	Limit(limit int) IDomainRoleDo
	Offset(offset int) IDomainRoleDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainRoleDo
	Unscoped() IDomainRoleDo
	Create(values ...*model.DomainRole) error
	CreateInBatches(values []*model.DomainRole, batchSize int) error
	Save(values ...*model.DomainRole) error
	First() (*model.DomainRole, error)
	Take() (*model.DomainRole, error)
	Last() (*model.DomainRole, error)
	Find() ([]*model.DomainRole, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainRole, err error)
	FindInBatches(result *[]*model.DomainRole, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DomainRole) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDomainRoleDo
	Assign(attrs ...field.AssignExpr) IDomainRoleDo
	Joins(fields ...field.RelationField) IDomainRoleDo
	Preload(fields ...field.RelationField) IDomainRoleDo
	FirstOrInit() (*model.DomainRole, error)
	FirstOrCreate() (*model.DomainRole, error)
	FindByPage(offset int, limit int) (result []*model.DomainRole, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDomainRoleDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d domainRoleDo) Debug() IDomainRoleDo {
	return d.withDO(d.DO.Debug())
}

func (d domainRoleDo) WithContext(ctx context.Context) IDomainRoleDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d domainRoleDo) ReadDB() IDomainRoleDo {
	return d.Clauses(dbresolver.Read)
}

func (d domainRoleDo) WriteDB() IDomainRoleDo {
	return d.Clauses(dbresolver.Write)
}

func (d domainRoleDo) Session(config *gorm.Session) IDomainRoleDo {
	return d.withDO(d.DO.Session(config))
}

func (d domainRoleDo) Clauses(conds ...clause.Expression) IDomainRoleDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d domainRoleDo) Returning(value interface{}, columns ...string) IDomainRoleDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d domainRoleDo) Not(conds ...gen.Condition) IDomainRoleDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d domainRoleDo) Or(conds ...gen.Condition) IDomainRoleDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d domainRoleDo) Select(conds ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d domainRoleDo) Where(conds ...gen.Condition) IDomainRoleDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d domainRoleDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDomainRoleDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d domainRoleDo) Order(conds ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d domainRoleDo) Distinct(cols ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d domainRoleDo) Omit(cols ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d domainRoleDo) Join(table schema.Tabler, on ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d domainRoleDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d domainRoleDo) RightJoin(table schema.Tabler, on ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d domainRoleDo) Group(cols ...field.Expr) IDomainRoleDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d domainRoleDo) Having(conds ...gen.Condition) IDomainRoleDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d domainRoleDo) Limit(limit int) IDomainRoleDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d domainRoleDo) Offset(offset int) IDomainRoleDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d domainRoleDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDomainRoleDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d domainRoleDo) Unscoped() IDomainRoleDo {
	return d.withDO(d.DO.Unscoped())
}

func (d domainRoleDo) Create(values ...*model.DomainRole) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d domainRoleDo) CreateInBatches(values []*model.DomainRole, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d domainRoleDo) Save(values ...*model.DomainRole) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d domainRoleDo) First() (*model.DomainRole, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainRole), nil
	}
}

func (d domainRoleDo) Take() (*model.DomainRole, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainRole), nil
	}
}

func (d domainRoleDo) Last() (*model.DomainRole, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainRole), nil
	}
}

func (d domainRoleDo) Find() ([]*model.DomainRole, error) {
	result, err := d.DO.Find()
	return result.([]*model.DomainRole), err
}

func (d domainRoleDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DomainRole, err error) {
	buf := make([]*model.DomainRole, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d domainRoleDo) FindInBatches(result *[]*model.DomainRole, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d domainRoleDo) Attrs(attrs ...field.AssignExpr) IDomainRoleDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d domainRoleDo) Assign(attrs ...field.AssignExpr) IDomainRoleDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d domainRoleDo) Joins(fields ...field.RelationField) IDomainRoleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d domainRoleDo) Preload(fields ...field.RelationField) IDomainRoleDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d domainRoleDo) FirstOrInit() (*model.DomainRole, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainRole), nil
	}
}

func (d domainRoleDo) FirstOrCreate() (*model.DomainRole, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DomainRole), nil
	}
}

func (d domainRoleDo) FindByPage(offset int, limit int) (result []*model.DomainRole, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d domainRoleDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d domainRoleDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d domainRoleDo) Delete(models ...*model.DomainRole) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *domainRoleDo) withDO(do gen.Dao) *domainRoleDo {
	d.DO = *do.(*gen.DO)
	return d
}
