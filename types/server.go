// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package types

import (
	"bytes"
	"context"
	"fmt"
	"mime/multipart"
	"net/url"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gofiber/fiber/v2"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Admin List Domain Roles
	// (GET /admin/domain_roles)
	V1AdminListDomainRoles(c *fiber.Ctx, params V1AdminListDomainRolesParams) error
	// Admin List Judgers
	// (GET /admin/judgers)
	V1AdminListJudgers(c *fiber.Ctx, params V1AdminListJudgersParams) error
	// Admin Create Judger
	// (POST /admin/judgers)
	V1AdminCreateJudger(c *fiber.Ctx) error
	// Admin List Users
	// (GET /admin/users)
	V1AdminListUsers(c *fiber.Ctx, params V1AdminListUsersParams) error
	// Admin Get User
	// (GET /admin/{uid})
	V1AdminGetUser(c *fiber.Ctx, uid string) error
	// Admin List User Domains
	// (GET /admin/{uid}/domains)
	V1AdminListUserDomains(c *fiber.Ctx, uid string, params V1AdminListUserDomainsParams) error
	// Login
	// (POST /auth/login)
	V1Login(c *fiber.Ctx, params V1LoginParams) error
	// Logout
	// (POST /auth/logout)
	V1Logout(c *fiber.Ctx, params V1LogoutParams) error
	// List Oauth2
	// (GET /auth/oauth2)
	V1ListOauth2(c *fiber.Ctx) error
	// Oauth Authorize
	// (GET /auth/oauth2/{oauth2}/authorize)
	V1OauthAuthorize(c *fiber.Ctx, oauth2 string, params V1OauthAuthorizeParams) error
	// Refresh
	// (POST /auth/refresh)
	V1Refresh(c *fiber.Ctx, params V1RefreshParams) error
	// Register
	// (POST /auth/register)
	V1Register(c *fiber.Ctx, params V1RegisterParams) error
	// Get Token
	// (GET /auth/token)
	V1GetToken(c *fiber.Ctx, params V1GetTokenParams) error
	// List Domains
	// (GET /domains)
	V1ListDomains(c *fiber.Ctx, params V1ListDomainsParams) error
	// Create Domain
	// (POST /domains)
	V1CreateDomain(c *fiber.Ctx) error
	// Search Domain Groups
	// (GET /domains/groups)
	V1SearchDomainGroups(c *fiber.Ctx, params V1SearchDomainGroupsParams) error
	// Delete Domain
	// (DELETE /domains/{domain})
	V1DeleteDomain(c *fiber.Ctx, domain string) error
	// Get Domain
	// (GET /domains/{domain})
	V1GetDomain(c *fiber.Ctx, domain string) error
	// Update Domain
	// (PATCH /domains/{domain})
	V1UpdateDomain(c *fiber.Ctx, domain string) error
	// Search Domain Candidates
	// (GET /domains/{domain}/candidates)
	V1SearchDomainCandidates(c *fiber.Ctx, domain string, params V1SearchDomainCandidatesParams) error
	// List Domain Invitations
	// (GET /domains/{domain}/invitations)
	V1ListDomainInvitations(c *fiber.Ctx, domain string, params V1ListDomainInvitationsParams) error
	// Create Domain Invitation
	// (POST /domains/{domain}/invitations)
	V1CreateDomainInvitation(c *fiber.Ctx, domain string) error
	// Delete Domain Invitation
	// (DELETE /domains/{domain}/invitations/{invitation})
	V1DeleteDomainInvitation(c *fiber.Ctx, domain string, invitation string) error
	// Get Domain Invitation
	// (GET /domains/{domain}/invitations/{invitation})
	V1GetDomainInvitation(c *fiber.Ctx, domain string, invitation string) error
	// Update Domain Invitation
	// (PATCH /domains/{domain}/invitations/{invitation})
	V1UpdateDomainInvitation(c *fiber.Ctx, domain string, invitation string) error
	// Join Domain By Invitation
	// (POST /domains/{domain}/join)
	V1JoinDomainByInvitation(c *fiber.Ctx, domain string, params V1JoinDomainByInvitationParams) error
	// List Problem Sets
	// (GET /domains/{domain}/problem_sets)
	V1ListProblemSets(c *fiber.Ctx, domain string, params V1ListProblemSetsParams) error
	// Create Problem Set
	// (POST /domains/{domain}/problem_sets)
	V1CreateProblemSet(c *fiber.Ctx, domain string) error
	// Delete Problem Set
	// (DELETE /domains/{domain}/problem_sets/{problemSet})
	V1DeleteProblemSet(c *fiber.Ctx, domain string, problemSet string) error
	// Get Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet})
	V1GetProblemSet(c *fiber.Ctx, domain string, problemSet string) error
	// Update Problem Set
	// (PATCH /domains/{domain}/problem_sets/{problemSet})
	V1UpdateProblemSet(c *fiber.Ctx, domain string, problemSet string) error
	// List Problems In Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet}/problems)
	V1ListProblemsInProblemSet(c *fiber.Ctx, domain string, problemSet string) error
	// Add Problem In Problem Set
	// (POST /domains/{domain}/problem_sets/{problemSet}/problems)
	V1AddProblemInProblemSet(c *fiber.Ctx, domain string, problemSet string) error
	// Delete Problem In Problem Set
	// (DELETE /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1DeleteProblemInProblemSet(c *fiber.Ctx, domain string, problemSet string, problem string) error
	// Get Problem In Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1GetProblemInProblemSet(c *fiber.Ctx, domain string, problemSet string, problem string) error
	// Update Problem In Problem Set
	// (PATCH /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1UpdateProblemInProblemSet(c *fiber.Ctx, domain string, problemSet string, problem string) error
	// Submit Solution To Problem Set
	// (POST /domains/{domain}/problem_sets/{problemSet}/problems/{problem}/submit)
	V1SubmitSolutionToProblemSet(c *fiber.Ctx, domain string, problemSet string, problem string) error
	// List Problems
	// (GET /domains/{domain}/problems)
	V1ListProblems(c *fiber.Ctx, domain string, params V1ListProblemsParams) error
	// Create Problem
	// (POST /domains/{domain}/problems)
	V1CreateProblem(c *fiber.Ctx, domain string) error
	// Clone Problem
	// (POST /domains/{domain}/problems/clone)
	V1CloneProblem(c *fiber.Ctx, domain string) error
	// Delete Problem
	// (DELETE /domains/{domain}/problems/{problem})
	V1DeleteProblem(c *fiber.Ctx, domain string, problem string) error
	// Get Problem
	// (GET /domains/{domain}/problems/{problem})
	V1GetProblem(c *fiber.Ctx, domain string, problem string) error
	// Update Problem
	// (PATCH /domains/{domain}/problems/{problem})
	V1UpdateProblem(c *fiber.Ctx, domain string, problem string) error
	// Submit Solution To Problem
	// (POST /domains/{domain}/problems/{problem})
	V1SubmitSolutionToProblem(c *fiber.Ctx, domain string, problem string) error
	// List Problem Config Commits
	// (GET /domains/{domain}/problems/{problem}/configs)
	V1ListProblemConfigCommits(c *fiber.Ctx, domain string, problem string, params V1ListProblemConfigCommitsParams) error
	// Update Problem Config By Archive
	// (POST /domains/{domain}/problems/{problem}/configs)
	V1UpdateProblemConfigByArchive(c *fiber.Ctx, domain string, problem string, params V1UpdateProblemConfigByArchiveParams) error
	// Update Problem Config Json
	// (POST /domains/{domain}/problems/{problem}/configs/json)
	V1UpdateProblemConfigJson(c *fiber.Ctx, domain string, problem string) error
	// Diff Problem Config Default Branch
	// (GET /domains/{domain}/problems/{problem}/configs/latest/diff)
	V1DiffProblemConfigDefaultBranch(c *fiber.Ctx, domain string, problem string, params V1DiffProblemConfigDefaultBranchParams) error
	// List Latest Problem Config Objects Under A Given Prefix
	// (GET /domains/{domain}/problems/{problem}/configs/latest/ls)
	V1ListLatestProblemConfigObjectsUnderAGivenPrefix(c *fiber.Ctx, domain string, problem string, params V1ListLatestProblemConfigObjectsUnderAGivenPrefixParams) error
	// Download Problem Config Archive
	// (GET /domains/{domain}/problems/{problem}/configs/{config})
	V1DownloadProblemConfigArchive(c *fiber.Ctx, domain string, problem string, config string, params V1DownloadProblemConfigArchiveParams) error
	// Get Problem Config Json
	// (GET /domains/{domain}/problems/{problem}/configs/{config}/json)
	V1GetProblemConfigJson(c *fiber.Ctx, domain string, problem string, config string) error
	// List Records In Domain
	// (GET /domains/{domain}/records)
	V1ListRecordsInDomain(c *fiber.Ctx, domain string, params V1ListRecordsInDomainParams) error
	// Get Record
	// (GET /domains/{domain}/records/{record})
	V1GetRecord(c *fiber.Ctx, domain string, record openapi_types.UUID) error
	// Submit Case By Judger
	// (PUT /domains/{domain}/records/{record}/cases/{index}/judge)
	V1SubmitCaseByJudger(c *fiber.Ctx, domain string, record string, index int) error
	// Submit Record By Judger
	// (PUT /domains/{domain}/records/{record}/judge)
	V1SubmitRecordByJudger(c *fiber.Ctx, domain string, record string) error
	// Claim Record By Judger
	// (POST /domains/{domain}/records/{record}/judge/claim)
	V1ClaimRecordByJudger(c *fiber.Ctx, domain string, record string) error
	// List Domain Roles
	// (GET /domains/{domain}/roles)
	V1ListDomainRoles(c *fiber.Ctx, domain string, params V1ListDomainRolesParams) error
	// Create Domain Role
	// (POST /domains/{domain}/roles)
	V1CreateDomainRole(c *fiber.Ctx, domain string) error
	// Delete Domain Role
	// (DELETE /domains/{domain}/roles/{role})
	V1DeleteDomainRole(c *fiber.Ctx, domain string, role string) error
	// Get Domain Role
	// (GET /domains/{domain}/roles/{role})
	V1GetDomainRole(c *fiber.Ctx, domain string, role string) error
	// Update Domain Role
	// (PATCH /domains/{domain}/roles/{role})
	V1UpdateDomainRole(c *fiber.Ctx, domain string, role string) error
	// Transfer Domain
	// (POST /domains/{domain}/transfer)
	V1TransferDomain(c *fiber.Ctx, domain string) error
	// List Domain Users
	// (GET /domains/{domain}/users)
	V1ListDomainUsers(c *fiber.Ctx, domain string, params V1ListDomainUsersParams) error
	// Add Domain User
	// (POST /domains/{domain}/users)
	V1AddDomainUser(c *fiber.Ctx, domain string) error
	// Remove Domain User
	// (DELETE /domains/{domain}/users/{user})
	V1RemoveDomainUser(c *fiber.Ctx, domain string, user string) error
	// Get Domain User
	// (GET /domains/{domain}/users/{user})
	V1GetDomainUser(c *fiber.Ctx, domain string, user string) error
	// Update Domain User
	// (PATCH /domains/{domain}/users/{user})
	V1UpdateDomainUser(c *fiber.Ctx, domain string, user string) error
	// Get Domain User Permission
	// (GET /domains/{domain}/users/{user}/permission)
	V1GetDomainUserPermission(c *fiber.Ctx, domain string, user string) error
	// Jwt Decoded
	// (GET /jwt_decoded)
	V1JwtDecoded(c *fiber.Ctx) error
	// List Problem Groups
	// (GET /problem_groups)
	V1ListProblemGroups(c *fiber.Ctx, params V1ListProblemGroupsParams) error
	// Test Error Report
	// (GET /test/report)
	V1TestErrorReport(c *fiber.Ctx) error
	// Get Current User
	// (GET /users/me)
	V1GetCurrentUser(c *fiber.Ctx) error
	// Update Current User
	// (PATCH /users/me)
	V1UpdateCurrentUser(c *fiber.Ctx) error
	// Change Password
	// (PATCH /users/me/password)
	V1ChangePassword(c *fiber.Ctx) error
	// Get User
	// (GET /users/{uid})
	V1GetUser(c *fiber.Ctx, uid string) error
	// Version
	// (GET /version)
	V1Version(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// V1AdminListDomainRoles operation middleware
func (siw *ServerInterfaceWrapper) V1AdminListDomainRoles(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AdminListDomainRolesParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1AdminListDomainRoles(c, params)
}

// V1AdminListJudgers operation middleware
func (siw *ServerInterfaceWrapper) V1AdminListJudgers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AdminListJudgersParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1AdminListJudgers(c, params)
}

// V1AdminCreateJudger operation middleware
func (siw *ServerInterfaceWrapper) V1AdminCreateJudger(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1AdminCreateJudger(c)
}

// V1AdminListUsers operation middleware
func (siw *ServerInterfaceWrapper) V1AdminListUsers(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AdminListUsersParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1AdminListUsers(c, params)
}

// V1AdminGetUser operation middleware
func (siw *ServerInterfaceWrapper) V1AdminGetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameter("simple", false, "uid", c.Params("uid"), &uid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uid: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1AdminGetUser(c, uid)
}

// V1AdminListUserDomains operation middleware
func (siw *ServerInterfaceWrapper) V1AdminListUserDomains(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameter("simple", false, "uid", c.Params("uid"), &uid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uid: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1AdminListUserDomainsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", query, &params.Role)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter role: %w", err).Error())
	}

	// ------------- Optional query parameter "groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "groups", query, &params.Groups)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groups: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1AdminListUserDomains(c, uid, params)
}

// V1Login operation middleware
func (siw *ServerInterfaceWrapper) V1Login(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1LoginParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1Login(c, params)
}

// V1Logout operation middleware
func (siw *ServerInterfaceWrapper) V1Logout(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1LogoutParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1Logout(c, params)
}

// V1ListOauth2 operation middleware
func (siw *ServerInterfaceWrapper) V1ListOauth2(c *fiber.Ctx) error {

	return siw.Handler.V1ListOauth2(c)
}

// V1OauthAuthorize operation middleware
func (siw *ServerInterfaceWrapper) V1OauthAuthorize(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "oauth2" -------------
	var oauth2 string

	err = runtime.BindStyledParameter("simple", false, "oauth2", c.Params("oauth2"), &oauth2)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter oauth2: %w", err).Error())
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params V1OauthAuthorizeParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "scopes" -------------

	err = runtime.BindQueryParameter("form", true, false, "scopes", query, &params.Scopes)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter scopes: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1OauthAuthorize(c, oauth2, params)
}

// V1Refresh operation middleware
func (siw *ServerInterfaceWrapper) V1Refresh(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1RefreshParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1Refresh(c, params)
}

// V1Register operation middleware
func (siw *ServerInterfaceWrapper) V1Register(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1RegisterParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1Register(c, params)
}

// V1GetToken operation middleware
func (siw *ServerInterfaceWrapper) V1GetToken(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params V1GetTokenParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "cookie" -------------

	err = runtime.BindQueryParameter("form", true, false, "cookie", query, &params.Cookie)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter cookie: %w", err).Error())
	}

	// ------------- Required query parameter "responseType" -------------

	if paramValue := c.Query("responseType"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument responseType is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "responseType", query, &params.ResponseType)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter responseType: %w", err).Error())
	}

	// ------------- Optional query parameter "redirectUrl" -------------

	err = runtime.BindQueryParameter("form", true, false, "redirectUrl", query, &params.RedirectUrl)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter redirectUrl: %w", err).Error())
	}

	return siw.Handler.V1GetToken(c, params)
}

// V1ListDomains operation middleware
func (siw *ServerInterfaceWrapper) V1ListDomains(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListDomainsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "roles" -------------

	err = runtime.BindQueryParameter("form", true, false, "roles", query, &params.Roles)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter roles: %w", err).Error())
	}

	// ------------- Optional query parameter "groups" -------------

	err = runtime.BindQueryParameter("form", true, false, "groups", query, &params.Groups)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter groups: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListDomains(c, params)
}

// V1CreateDomain operation middleware
func (siw *ServerInterfaceWrapper) V1CreateDomain(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CreateDomain(c)
}

// V1SearchDomainGroups operation middleware
func (siw *ServerInterfaceWrapper) V1SearchDomainGroups(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1SearchDomainGroupsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument query is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	return siw.Handler.V1SearchDomainGroups(c, params)
}

// V1DeleteDomain operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteDomain(c, domain)
}

// V1GetDomain operation middleware
func (siw *ServerInterfaceWrapper) V1GetDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetDomain(c, domain)
}

// V1UpdateDomain operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateDomain(c, domain)
}

// V1SearchDomainCandidates operation middleware
func (siw *ServerInterfaceWrapper) V1SearchDomainCandidates(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1SearchDomainCandidatesParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "query" -------------

	if paramValue := c.Query("query"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument query is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "query", query, &params.Query)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter query: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	return siw.Handler.V1SearchDomainCandidates(c, domain, params)
}

// V1ListDomainInvitations operation middleware
func (siw *ServerInterfaceWrapper) V1ListDomainInvitations(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListDomainInvitationsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListDomainInvitations(c, domain, params)
}

// V1CreateDomainInvitation operation middleware
func (siw *ServerInterfaceWrapper) V1CreateDomainInvitation(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CreateDomainInvitation(c, domain)
}

// V1DeleteDomainInvitation operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteDomainInvitation(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "invitation" -------------
	var invitation string

	err = runtime.BindStyledParameter("simple", false, "invitation", c.Params("invitation"), &invitation)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invitation: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteDomainInvitation(c, domain, invitation)
}

// V1GetDomainInvitation operation middleware
func (siw *ServerInterfaceWrapper) V1GetDomainInvitation(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "invitation" -------------
	var invitation string

	err = runtime.BindStyledParameter("simple", false, "invitation", c.Params("invitation"), &invitation)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invitation: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetDomainInvitation(c, domain, invitation)
}

// V1UpdateDomainInvitation operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateDomainInvitation(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "invitation" -------------
	var invitation string

	err = runtime.BindStyledParameter("simple", false, "invitation", c.Params("invitation"), &invitation)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invitation: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateDomainInvitation(c, domain, invitation)
}

// V1JoinDomainByInvitation operation middleware
func (siw *ServerInterfaceWrapper) V1JoinDomainByInvitation(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1JoinDomainByInvitationParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "invitationCode" -------------

	if paramValue := c.Query("invitationCode"); paramValue != "" {

	} else {
		err = fmt.Errorf("Query argument invitationCode is required, but not found")
		c.Status(fiber.StatusBadRequest).JSON(err)
		return err
	}

	err = runtime.BindQueryParameter("form", true, true, "invitationCode", query, &params.InvitationCode)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter invitationCode: %w", err).Error())
	}

	return siw.Handler.V1JoinDomainByInvitation(c, domain, params)
}

// V1ListProblemSets operation middleware
func (siw *ServerInterfaceWrapper) V1ListProblemSets(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListProblemSetsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListProblemSets(c, domain, params)
}

// V1CreateProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1CreateProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CreateProblemSet(c, domain)
}

// V1DeleteProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteProblemSet(c, domain, problemSet)
}

// V1GetProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1GetProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetProblemSet(c, domain, problemSet)
}

// V1UpdateProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateProblemSet(c, domain, problemSet)
}

// V1ListProblemsInProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1ListProblemsInProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1ListProblemsInProblemSet(c, domain, problemSet)
}

// V1AddProblemInProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1AddProblemInProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1AddProblemInProblemSet(c, domain, problemSet)
}

// V1DeleteProblemInProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteProblemInProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteProblemInProblemSet(c, domain, problemSet, problem)
}

// V1GetProblemInProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1GetProblemInProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetProblemInProblemSet(c, domain, problemSet, problem)
}

// V1UpdateProblemInProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateProblemInProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateProblemInProblemSet(c, domain, problemSet, problem)
}

// V1SubmitSolutionToProblemSet operation middleware
func (siw *ServerInterfaceWrapper) V1SubmitSolutionToProblemSet(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problemSet" -------------
	var problemSet string

	err = runtime.BindStyledParameter("simple", false, "problemSet", c.Params("problemSet"), &problemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1SubmitSolutionToProblemSet(c, domain, problemSet, problem)
}

// V1ListProblems operation middleware
func (siw *ServerInterfaceWrapper) V1ListProblems(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListProblemsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListProblems(c, domain, params)
}

// V1CreateProblem operation middleware
func (siw *ServerInterfaceWrapper) V1CreateProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CreateProblem(c, domain)
}

// V1CloneProblem operation middleware
func (siw *ServerInterfaceWrapper) V1CloneProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CloneProblem(c, domain)
}

// V1DeleteProblem operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteProblem(c, domain, problem)
}

// V1GetProblem operation middleware
func (siw *ServerInterfaceWrapper) V1GetProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetProblem(c, domain, problem)
}

// V1UpdateProblem operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateProblem(c, domain, problem)
}

// V1SubmitSolutionToProblem operation middleware
func (siw *ServerInterfaceWrapper) V1SubmitSolutionToProblem(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1SubmitSolutionToProblem(c, domain, problem)
}

// V1ListProblemConfigCommits operation middleware
func (siw *ServerInterfaceWrapper) V1ListProblemConfigCommits(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListProblemConfigCommitsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListProblemConfigCommits(c, domain, problem, params)
}

// V1UpdateProblemConfigByArchive operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateProblemConfigByArchive(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1UpdateProblemConfigByArchiveParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "configJsonOnMissing" -------------

	err = runtime.BindQueryParameter("form", true, false, "configJsonOnMissing", query, &params.ConfigJsonOnMissing)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter configJsonOnMissing: %w", err).Error())
	}

	return siw.Handler.V1UpdateProblemConfigByArchive(c, domain, problem, params)
}

// V1UpdateProblemConfigJson operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateProblemConfigJson(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateProblemConfigJson(c, domain, problem)
}

// V1DiffProblemConfigDefaultBranch operation middleware
func (siw *ServerInterfaceWrapper) V1DiffProblemConfigDefaultBranch(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1DiffProblemConfigDefaultBranchParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", query, &params.After)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter after: %w", err).Error())
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", query, &params.Amount)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter amount: %w", err).Error())
	}

	// ------------- Optional query parameter "delimiter" -------------

	err = runtime.BindQueryParameter("form", true, false, "delimiter", query, &params.Delimiter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter delimiter: %w", err).Error())
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", query, &params.Prefix)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter prefix: %w", err).Error())
	}

	return siw.Handler.V1DiffProblemConfigDefaultBranch(c, domain, problem, params)
}

// V1ListLatestProblemConfigObjectsUnderAGivenPrefix operation middleware
func (siw *ServerInterfaceWrapper) V1ListLatestProblemConfigObjectsUnderAGivenPrefix(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListLatestProblemConfigObjectsUnderAGivenPrefixParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "after" -------------

	err = runtime.BindQueryParameter("form", true, false, "after", query, &params.After)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter after: %w", err).Error())
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", query, &params.Amount)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter amount: %w", err).Error())
	}

	// ------------- Optional query parameter "delimiter" -------------

	err = runtime.BindQueryParameter("form", true, false, "delimiter", query, &params.Delimiter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter delimiter: %w", err).Error())
	}

	// ------------- Optional query parameter "prefix" -------------

	err = runtime.BindQueryParameter("form", true, false, "prefix", query, &params.Prefix)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter prefix: %w", err).Error())
	}

	return siw.Handler.V1ListLatestProblemConfigObjectsUnderAGivenPrefix(c, domain, problem, params)
}

// V1DownloadProblemConfigArchive operation middleware
func (siw *ServerInterfaceWrapper) V1DownloadProblemConfigArchive(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	// ------------- Path parameter "config" -------------
	var config string

	err = runtime.BindStyledParameter("simple", false, "config", c.Params("config"), &config)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter config: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1DownloadProblemConfigArchiveParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "archiveFormat" -------------

	err = runtime.BindQueryParameter("form", true, false, "archiveFormat", query, &params.ArchiveFormat)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter archiveFormat: %w", err).Error())
	}

	return siw.Handler.V1DownloadProblemConfigArchive(c, domain, problem, config, params)
}

// V1GetProblemConfigJson operation middleware
func (siw *ServerInterfaceWrapper) V1GetProblemConfigJson(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "problem" -------------
	var problem string

	err = runtime.BindStyledParameter("simple", false, "problem", c.Params("problem"), &problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	// ------------- Path parameter "config" -------------
	var config string

	err = runtime.BindStyledParameter("simple", false, "config", c.Params("config"), &config)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter config: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetProblemConfigJson(c, domain, problem, config)
}

// V1ListRecordsInDomain operation middleware
func (siw *ServerInterfaceWrapper) V1ListRecordsInDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListRecordsInDomainParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "problemSet" -------------

	err = runtime.BindQueryParameter("form", true, false, "problemSet", query, &params.ProblemSet)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problemSet: %w", err).Error())
	}

	// ------------- Optional query parameter "problem" -------------

	err = runtime.BindQueryParameter("form", true, false, "problem", query, &params.Problem)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter problem: %w", err).Error())
	}

	// ------------- Optional query parameter "submitterId" -------------

	err = runtime.BindQueryParameter("form", true, false, "submitterId", query, &params.SubmitterId)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter submitterId: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListRecordsInDomain(c, domain, params)
}

// V1GetRecord operation middleware
func (siw *ServerInterfaceWrapper) V1GetRecord(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "record" -------------
	var record openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "record", c.Params("record"), &record)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter record: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetRecord(c, domain, record)
}

// V1SubmitCaseByJudger operation middleware
func (siw *ServerInterfaceWrapper) V1SubmitCaseByJudger(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "record" -------------
	var record string

	err = runtime.BindStyledParameter("simple", false, "record", c.Params("record"), &record)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter record: %w", err).Error())
	}

	// ------------- Path parameter "index" -------------
	var index int

	err = runtime.BindStyledParameter("simple", false, "index", c.Params("index"), &index)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter index: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1SubmitCaseByJudger(c, domain, record, index)
}

// V1SubmitRecordByJudger operation middleware
func (siw *ServerInterfaceWrapper) V1SubmitRecordByJudger(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "record" -------------
	var record string

	err = runtime.BindStyledParameter("simple", false, "record", c.Params("record"), &record)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter record: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1SubmitRecordByJudger(c, domain, record)
}

// V1ClaimRecordByJudger operation middleware
func (siw *ServerInterfaceWrapper) V1ClaimRecordByJudger(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "record" -------------
	var record string

	err = runtime.BindStyledParameter("simple", false, "record", c.Params("record"), &record)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter record: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1ClaimRecordByJudger(c, domain, record)
}

// V1ListDomainRoles operation middleware
func (siw *ServerInterfaceWrapper) V1ListDomainRoles(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListDomainRolesParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	return siw.Handler.V1ListDomainRoles(c, domain, params)
}

// V1CreateDomainRole operation middleware
func (siw *ServerInterfaceWrapper) V1CreateDomainRole(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1CreateDomainRole(c, domain)
}

// V1DeleteDomainRole operation middleware
func (siw *ServerInterfaceWrapper) V1DeleteDomainRole(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameter("simple", false, "role", c.Params("role"), &role)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter role: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1DeleteDomainRole(c, domain, role)
}

// V1GetDomainRole operation middleware
func (siw *ServerInterfaceWrapper) V1GetDomainRole(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameter("simple", false, "role", c.Params("role"), &role)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter role: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetDomainRole(c, domain, role)
}

// V1UpdateDomainRole operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateDomainRole(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameter("simple", false, "role", c.Params("role"), &role)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter role: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateDomainRole(c, domain, role)
}

// V1TransferDomain operation middleware
func (siw *ServerInterfaceWrapper) V1TransferDomain(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1TransferDomain(c, domain)
}

// V1ListDomainUsers operation middleware
func (siw *ServerInterfaceWrapper) V1ListDomainUsers(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListDomainUsersParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListDomainUsers(c, domain, params)
}

// V1AddDomainUser operation middleware
func (siw *ServerInterfaceWrapper) V1AddDomainUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1AddDomainUser(c, domain)
}

// V1RemoveDomainUser operation middleware
func (siw *ServerInterfaceWrapper) V1RemoveDomainUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", c.Params("user"), &user)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1RemoveDomainUser(c, domain, user)
}

// V1GetDomainUser operation middleware
func (siw *ServerInterfaceWrapper) V1GetDomainUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", c.Params("user"), &user)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetDomainUser(c, domain, user)
}

// V1UpdateDomainUser operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateDomainUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", c.Params("user"), &user)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateDomainUser(c, domain, user)
}

// V1GetDomainUserPermission operation middleware
func (siw *ServerInterfaceWrapper) V1GetDomainUserPermission(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "domain" -------------
	var domain string

	err = runtime.BindStyledParameter("simple", false, "domain", c.Params("domain"), &domain)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter domain: %w", err).Error())
	}

	// ------------- Path parameter "user" -------------
	var user string

	err = runtime.BindStyledParameter("simple", false, "user", c.Params("user"), &user)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter user: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetDomainUserPermission(c, domain, user)
}

// V1JwtDecoded operation middleware
func (siw *ServerInterfaceWrapper) V1JwtDecoded(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1JwtDecoded(c)
}

// V1ListProblemGroups operation middleware
func (siw *ServerInterfaceWrapper) V1ListProblemGroups(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params V1ListProblemGroupsParams

	query, err := url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "ordering" -------------

	err = runtime.BindQueryParameter("form", true, false, "ordering", query, &params.Ordering)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter ordering: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.V1ListProblemGroups(c, params)
}

// V1TestErrorReport operation middleware
func (siw *ServerInterfaceWrapper) V1TestErrorReport(c *fiber.Ctx) error {

	return siw.Handler.V1TestErrorReport(c)
}

// V1GetCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) V1GetCurrentUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetCurrentUser(c)
}

// V1UpdateCurrentUser operation middleware
func (siw *ServerInterfaceWrapper) V1UpdateCurrentUser(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1UpdateCurrentUser(c)
}

// V1ChangePassword operation middleware
func (siw *ServerInterfaceWrapper) V1ChangePassword(c *fiber.Ctx) error {

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1ChangePassword(c)
}

// V1GetUser operation middleware
func (siw *ServerInterfaceWrapper) V1GetUser(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "uid" -------------
	var uid string

	err = runtime.BindStyledParameter("simple", false, "uid", c.Params("uid"), &uid)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter uid: %w", err).Error())
	}

	c.Context().SetUserValue(HTTPBearerScopes, []string{""})

	return siw.Handler.V1GetUser(c, uid)
}

// V1Version operation middleware
func (siw *ServerInterfaceWrapper) V1Version(c *fiber.Ctx) error {

	return siw.Handler.V1Version(c)
}

type V1AdminListDomainRolesRequestObject struct {
	Params V1AdminListDomainRolesParams
}

type V1AdminListDomainRolesResponseObject interface {
	VisitV1AdminListDomainRolesResponse(ctx *fiber.Ctx) error
}

type V1AdminListDomainRoles200JSONResponse DomainRoleListResp

func (response V1AdminListDomainRoles200JSONResponse) VisitV1AdminListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminListDomainRoles403JSONResponse Detail

func (response V1AdminListDomainRoles403JSONResponse) VisitV1AdminListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminListDomainRoles422JSONResponse HTTPValidationError

func (response V1AdminListDomainRoles422JSONResponse) VisitV1AdminListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AdminListJudgersRequestObject struct {
	Params V1AdminListJudgersParams
}

type V1AdminListJudgersResponseObject interface {
	VisitV1AdminListJudgersResponse(ctx *fiber.Ctx) error
}

type V1AdminListJudgers200JSONResponse JudgerDetailListResp

func (response V1AdminListJudgers200JSONResponse) VisitV1AdminListJudgersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminListJudgers403JSONResponse Detail

func (response V1AdminListJudgers403JSONResponse) VisitV1AdminListJudgersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminListJudgers422JSONResponse HTTPValidationError

func (response V1AdminListJudgers422JSONResponse) VisitV1AdminListJudgersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AdminCreateJudgerRequestObject struct {
	Body *V1AdminCreateJudgerJSONRequestBody
}

type V1AdminCreateJudgerResponseObject interface {
	VisitV1AdminCreateJudgerResponse(ctx *fiber.Ctx) error
}

type V1AdminCreateJudger200JSONResponse AuthTokensWithLakefsResp

func (response V1AdminCreateJudger200JSONResponse) VisitV1AdminCreateJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminCreateJudger403JSONResponse Detail

func (response V1AdminCreateJudger403JSONResponse) VisitV1AdminCreateJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminCreateJudger422JSONResponse HTTPValidationError

func (response V1AdminCreateJudger422JSONResponse) VisitV1AdminCreateJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AdminListUsersRequestObject struct {
	Params V1AdminListUsersParams
}

type V1AdminListUsersResponseObject interface {
	VisitV1AdminListUsersResponse(ctx *fiber.Ctx) error
}

type V1AdminListUsers200JSONResponse UserListResp

func (response V1AdminListUsers200JSONResponse) VisitV1AdminListUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminListUsers403JSONResponse Detail

func (response V1AdminListUsers403JSONResponse) VisitV1AdminListUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminListUsers422JSONResponse HTTPValidationError

func (response V1AdminListUsers422JSONResponse) VisitV1AdminListUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AdminGetUserRequestObject struct {
	Uid string `json:"uid"`
}

type V1AdminGetUserResponseObject interface {
	VisitV1AdminGetUserResponse(ctx *fiber.Ctx) error
}

type V1AdminGetUser200JSONResponse UserDetailResp

func (response V1AdminGetUser200JSONResponse) VisitV1AdminGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminGetUser403JSONResponse Detail

func (response V1AdminGetUser403JSONResponse) VisitV1AdminGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminGetUser422JSONResponse HTTPValidationError

func (response V1AdminGetUser422JSONResponse) VisitV1AdminGetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AdminListUserDomainsRequestObject struct {
	Uid    string `json:"uid"`
	Params V1AdminListUserDomainsParams
}

type V1AdminListUserDomainsResponseObject interface {
	VisitV1AdminListUserDomainsResponse(ctx *fiber.Ctx) error
}

type V1AdminListUserDomains200JSONResponse DomainListResp

func (response V1AdminListUserDomains200JSONResponse) VisitV1AdminListUserDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AdminListUserDomains403JSONResponse Detail

func (response V1AdminListUserDomains403JSONResponse) VisitV1AdminListUserDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AdminListUserDomains422JSONResponse HTTPValidationError

func (response V1AdminListUserDomains422JSONResponse) VisitV1AdminListUserDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1LoginRequestObject struct {
	Params V1LoginParams
	Body   *V1LoginFormdataRequestBody
}

type V1LoginResponseObject interface {
	VisitV1LoginResponse(ctx *fiber.Ctx) error
}

type V1Login200JSONResponse AuthTokensResp

func (response V1Login200JSONResponse) VisitV1LoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1Login403JSONResponse Detail

func (response V1Login403JSONResponse) VisitV1LoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1Login422JSONResponse HTTPValidationError

func (response V1Login422JSONResponse) VisitV1LoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1LogoutRequestObject struct {
	Params V1LogoutParams
}

type V1LogoutResponseObject interface {
	VisitV1LogoutResponse(ctx *fiber.Ctx) error
}

// type V1Logout200JSONResponse interface{}

// func (response V1Logout200JSONResponse) VisitV1LogoutResponse(ctx *fiber.Ctx) error {
// 	ctx.Response().Header.Set("Content-Type", "application/json")
// 	ctx.Status(200)

// 	return ctx.JSON(&response)
// }

type V1Logout403JSONResponse Detail

func (response V1Logout403JSONResponse) VisitV1LogoutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1Logout422JSONResponse HTTPValidationError

func (response V1Logout422JSONResponse) VisitV1LogoutResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListOauth2RequestObject struct {
}

type V1ListOauth2ResponseObject interface {
	VisitV1ListOauth2Response(ctx *fiber.Ctx) error
}

type V1ListOauth2200JSONResponse OAuth2ClientListResp

func (response V1ListOauth2200JSONResponse) VisitV1ListOauth2Response(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListOauth2403JSONResponse Detail

func (response V1ListOauth2403JSONResponse) VisitV1ListOauth2Response(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1OauthAuthorizeRequestObject struct {
	Oauth2 string `json:"oauth2"`
	Params V1OauthAuthorizeParams
}

type V1OauthAuthorizeResponseObject interface {
	VisitV1OauthAuthorizeResponse(ctx *fiber.Ctx) error
}

type V1OauthAuthorize200JSONResponse RedirectResp

func (response V1OauthAuthorize200JSONResponse) VisitV1OauthAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1OauthAuthorize403JSONResponse Detail

func (response V1OauthAuthorize403JSONResponse) VisitV1OauthAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1OauthAuthorize422JSONResponse HTTPValidationError

func (response V1OauthAuthorize422JSONResponse) VisitV1OauthAuthorizeResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1RefreshRequestObject struct {
	Params V1RefreshParams
}

type V1RefreshResponseObject interface {
	VisitV1RefreshResponse(ctx *fiber.Ctx) error
}

type V1Refresh200JSONResponse AuthTokensResp

func (response V1Refresh200JSONResponse) VisitV1RefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1Refresh403JSONResponse Detail

func (response V1Refresh403JSONResponse) VisitV1RefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1Refresh422JSONResponse HTTPValidationError

func (response V1Refresh422JSONResponse) VisitV1RefreshResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1RegisterRequestObject struct {
	Params V1RegisterParams
	Body   *V1RegisterJSONRequestBody
}

type V1RegisterResponseObject interface {
	VisitV1RegisterResponse(ctx *fiber.Ctx) error
}

type V1Register200JSONResponse AuthTokensResp

func (response V1Register200JSONResponse) VisitV1RegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1Register403JSONResponse Detail

func (response V1Register403JSONResponse) VisitV1RegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1Register422JSONResponse HTTPValidationError

func (response V1Register422JSONResponse) VisitV1RegisterResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetTokenRequestObject struct {
	Params V1GetTokenParams
}

type V1GetTokenResponseObject interface {
	VisitV1GetTokenResponse(ctx *fiber.Ctx) error
}

type V1GetToken200JSONResponse AuthTokensResp

func (response V1GetToken200JSONResponse) VisitV1GetTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetToken403JSONResponse Detail

func (response V1GetToken403JSONResponse) VisitV1GetTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetToken422JSONResponse HTTPValidationError

func (response V1GetToken422JSONResponse) VisitV1GetTokenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListDomainsRequestObject struct {
	Params V1ListDomainsParams
}

type V1ListDomainsResponseObject interface {
	VisitV1ListDomainsResponse(ctx *fiber.Ctx) error
}

type V1ListDomains200JSONResponse DomainListResp

func (response V1ListDomains200JSONResponse) VisitV1ListDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListDomains403JSONResponse Detail

func (response V1ListDomains403JSONResponse) VisitV1ListDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListDomains422JSONResponse HTTPValidationError

func (response V1ListDomains422JSONResponse) VisitV1ListDomainsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CreateDomainRequestObject struct {
	Body *V1CreateDomainJSONRequestBody
}

type V1CreateDomainResponseObject interface {
	VisitV1CreateDomainResponse(ctx *fiber.Ctx) error
}

type V1CreateDomain200JSONResponse DomainResp

func NewV1CreateDomain200JSONResponse(data *Domain) V1CreateDomain200JSONResponse {
	return V1CreateDomain200JSONResponse{BizError: BizError{ErrorCode: Success}, Data: data}
}

func (response V1CreateDomain200JSONResponse) VisitV1CreateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CreateDomain403JSONResponse Detail

func (response V1CreateDomain403JSONResponse) VisitV1CreateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CreateDomain422JSONResponse HTTPValidationError

func (response V1CreateDomain422JSONResponse) VisitV1CreateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SearchDomainGroupsRequestObject struct {
	Params V1SearchDomainGroupsParams
}

type V1SearchDomainGroupsResponseObject interface {
	VisitV1SearchDomainGroupsResponse(ctx *fiber.Ctx) error
}

type V1SearchDomainGroups200JSONResponse DomainTagListResp

func (response V1SearchDomainGroups200JSONResponse) VisitV1SearchDomainGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SearchDomainGroups403JSONResponse Detail

func (response V1SearchDomainGroups403JSONResponse) VisitV1SearchDomainGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SearchDomainGroups422JSONResponse HTTPValidationError

func (response V1SearchDomainGroups422JSONResponse) VisitV1SearchDomainGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteDomainRequestObject struct {
	Domain string `json:"domain"`
}

type V1DeleteDomainResponseObject interface {
	VisitV1DeleteDomainResponse(ctx *fiber.Ctx) error
}

type V1DeleteDomain200JSONResponse EmptyResp

func (response V1DeleteDomain200JSONResponse) VisitV1DeleteDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteDomain403JSONResponse Detail

func (response V1DeleteDomain403JSONResponse) VisitV1DeleteDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteDomain422JSONResponse HTTPValidationError

func (response V1DeleteDomain422JSONResponse) VisitV1DeleteDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetDomainRequestObject struct {
	Domain string `json:"domain"`
}

type V1GetDomainResponseObject interface {
	VisitV1GetDomainResponse(ctx *fiber.Ctx) error
}

type V1GetDomain200JSONResponse DomainDetailResp

func (response V1GetDomain200JSONResponse) VisitV1GetDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetDomain403JSONResponse Detail

func (response V1GetDomain403JSONResponse) VisitV1GetDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetDomain422JSONResponse HTTPValidationError

func (response V1GetDomain422JSONResponse) VisitV1GetDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateDomainRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1UpdateDomainJSONRequestBody
}

type V1UpdateDomainResponseObject interface {
	VisitV1UpdateDomainResponse(ctx *fiber.Ctx) error
}

type V1UpdateDomain200JSONResponse DomainResp

func (response V1UpdateDomain200JSONResponse) VisitV1UpdateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateDomain403JSONResponse Detail

func (response V1UpdateDomain403JSONResponse) VisitV1UpdateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateDomain422JSONResponse HTTPValidationError

func (response V1UpdateDomain422JSONResponse) VisitV1UpdateDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SearchDomainCandidatesRequestObject struct {
	Domain string `json:"domain"`
	Params V1SearchDomainCandidatesParams
}

type V1SearchDomainCandidatesResponseObject interface {
	VisitV1SearchDomainCandidatesResponse(ctx *fiber.Ctx) error
}

type V1SearchDomainCandidates200JSONResponse UserDetailWithDomainRoleListResp

func (response V1SearchDomainCandidates200JSONResponse) VisitV1SearchDomainCandidatesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SearchDomainCandidates403JSONResponse Detail

func (response V1SearchDomainCandidates403JSONResponse) VisitV1SearchDomainCandidatesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SearchDomainCandidates422JSONResponse HTTPValidationError

func (response V1SearchDomainCandidates422JSONResponse) VisitV1SearchDomainCandidatesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListDomainInvitationsRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListDomainInvitationsParams
}

type V1ListDomainInvitationsResponseObject interface {
	VisitV1ListDomainInvitationsResponse(ctx *fiber.Ctx) error
}

type V1ListDomainInvitations200JSONResponse DomainInvitationListResp

func (response V1ListDomainInvitations200JSONResponse) VisitV1ListDomainInvitationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListDomainInvitations403JSONResponse Detail

func (response V1ListDomainInvitations403JSONResponse) VisitV1ListDomainInvitationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListDomainInvitations422JSONResponse HTTPValidationError

func (response V1ListDomainInvitations422JSONResponse) VisitV1ListDomainInvitationsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CreateDomainInvitationRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1CreateDomainInvitationJSONRequestBody
}

type V1CreateDomainInvitationResponseObject interface {
	VisitV1CreateDomainInvitationResponse(ctx *fiber.Ctx) error
}

type V1CreateDomainInvitation200JSONResponse DomainInvitationResp

func (response V1CreateDomainInvitation200JSONResponse) VisitV1CreateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CreateDomainInvitation403JSONResponse Detail

func (response V1CreateDomainInvitation403JSONResponse) VisitV1CreateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CreateDomainInvitation422JSONResponse HTTPValidationError

func (response V1CreateDomainInvitation422JSONResponse) VisitV1CreateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteDomainInvitationRequestObject struct {
	Domain     string `json:"domain"`
	Invitation string `json:"invitation"`
}

type V1DeleteDomainInvitationResponseObject interface {
	VisitV1DeleteDomainInvitationResponse(ctx *fiber.Ctx) error
}

type V1DeleteDomainInvitation200JSONResponse EmptyResp

func (response V1DeleteDomainInvitation200JSONResponse) VisitV1DeleteDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteDomainInvitation403JSONResponse Detail

func (response V1DeleteDomainInvitation403JSONResponse) VisitV1DeleteDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteDomainInvitation422JSONResponse HTTPValidationError

func (response V1DeleteDomainInvitation422JSONResponse) VisitV1DeleteDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetDomainInvitationRequestObject struct {
	Domain     string `json:"domain"`
	Invitation string `json:"invitation"`
}

type V1GetDomainInvitationResponseObject interface {
	VisitV1GetDomainInvitationResponse(ctx *fiber.Ctx) error
}

type V1GetDomainInvitation200JSONResponse DomainInvitationResp

func (response V1GetDomainInvitation200JSONResponse) VisitV1GetDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetDomainInvitation403JSONResponse Detail

func (response V1GetDomainInvitation403JSONResponse) VisitV1GetDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetDomainInvitation422JSONResponse HTTPValidationError

func (response V1GetDomainInvitation422JSONResponse) VisitV1GetDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateDomainInvitationRequestObject struct {
	Domain     string `json:"domain"`
	Invitation string `json:"invitation"`
	Body       *V1UpdateDomainInvitationJSONRequestBody
}

type V1UpdateDomainInvitationResponseObject interface {
	VisitV1UpdateDomainInvitationResponse(ctx *fiber.Ctx) error
}

type V1UpdateDomainInvitation200JSONResponse DomainInvitationResp

func (response V1UpdateDomainInvitation200JSONResponse) VisitV1UpdateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateDomainInvitation403JSONResponse Detail

func (response V1UpdateDomainInvitation403JSONResponse) VisitV1UpdateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateDomainInvitation422JSONResponse HTTPValidationError

func (response V1UpdateDomainInvitation422JSONResponse) VisitV1UpdateDomainInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1JoinDomainByInvitationRequestObject struct {
	Domain string `json:"domain"`
	Params V1JoinDomainByInvitationParams
}

type V1JoinDomainByInvitationResponseObject interface {
	VisitV1JoinDomainByInvitationResponse(ctx *fiber.Ctx) error
}

type V1JoinDomainByInvitation200JSONResponse UserWithDomainRoleResp

func (response V1JoinDomainByInvitation200JSONResponse) VisitV1JoinDomainByInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1JoinDomainByInvitation403JSONResponse Detail

func (response V1JoinDomainByInvitation403JSONResponse) VisitV1JoinDomainByInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1JoinDomainByInvitation422JSONResponse HTTPValidationError

func (response V1JoinDomainByInvitation422JSONResponse) VisitV1JoinDomainByInvitationResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListProblemSetsRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListProblemSetsParams
}

type V1ListProblemSetsResponseObject interface {
	VisitV1ListProblemSetsResponse(ctx *fiber.Ctx) error
}

type V1ListProblemSets200JSONResponse ProblemSetListResp

func (response V1ListProblemSets200JSONResponse) VisitV1ListProblemSetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListProblemSets403JSONResponse Detail

func (response V1ListProblemSets403JSONResponse) VisitV1ListProblemSetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblemSets422JSONResponse HTTPValidationError

func (response V1ListProblemSets422JSONResponse) VisitV1ListProblemSetsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CreateProblemSetRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1CreateProblemSetJSONRequestBody
}

type V1CreateProblemSetResponseObject interface {
	VisitV1CreateProblemSetResponse(ctx *fiber.Ctx) error
}

type V1CreateProblemSet200JSONResponse ProblemSetResp

func (response V1CreateProblemSet200JSONResponse) VisitV1CreateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CreateProblemSet403JSONResponse Detail

func (response V1CreateProblemSet403JSONResponse) VisitV1CreateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CreateProblemSet422JSONResponse HTTPValidationError

func (response V1CreateProblemSet422JSONResponse) VisitV1CreateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
}

type V1DeleteProblemSetResponseObject interface {
	VisitV1DeleteProblemSetResponse(ctx *fiber.Ctx) error
}

type V1DeleteProblemSet200JSONResponse EmptyResp

func (response V1DeleteProblemSet200JSONResponse) VisitV1DeleteProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteProblemSet403JSONResponse Detail

func (response V1DeleteProblemSet403JSONResponse) VisitV1DeleteProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteProblemSet422JSONResponse HTTPValidationError

func (response V1DeleteProblemSet422JSONResponse) VisitV1DeleteProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
}

type V1GetProblemSetResponseObject interface {
	VisitV1GetProblemSetResponse(ctx *fiber.Ctx) error
}

type V1GetProblemSet200JSONResponse ProblemSetDetailResp

func (response V1GetProblemSet200JSONResponse) VisitV1GetProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetProblemSet403JSONResponse Detail

func (response V1GetProblemSet403JSONResponse) VisitV1GetProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetProblemSet422JSONResponse HTTPValidationError

func (response V1GetProblemSet422JSONResponse) VisitV1GetProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Body       *V1UpdateProblemSetJSONRequestBody
}

type V1UpdateProblemSetResponseObject interface {
	VisitV1UpdateProblemSetResponse(ctx *fiber.Ctx) error
}

type V1UpdateProblemSet200JSONResponse ProblemSetResp

func (response V1UpdateProblemSet200JSONResponse) VisitV1UpdateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateProblemSet403JSONResponse Detail

func (response V1UpdateProblemSet403JSONResponse) VisitV1UpdateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateProblemSet422JSONResponse HTTPValidationError

func (response V1UpdateProblemSet422JSONResponse) VisitV1UpdateProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListProblemsInProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
}

type V1ListProblemsInProblemSetResponseObject interface {
	VisitV1ListProblemsInProblemSetResponse(ctx *fiber.Ctx) error
}

type V1ListProblemsInProblemSet200JSONResponse ProblemWithLatestRecordListResp

func (response V1ListProblemsInProblemSet200JSONResponse) VisitV1ListProblemsInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListProblemsInProblemSet403JSONResponse Detail

func (response V1ListProblemsInProblemSet403JSONResponse) VisitV1ListProblemsInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblemsInProblemSet422JSONResponse HTTPValidationError

func (response V1ListProblemsInProblemSet422JSONResponse) VisitV1ListProblemsInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AddProblemInProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Body       *V1AddProblemInProblemSetJSONRequestBody
}

type V1AddProblemInProblemSetResponseObject interface {
	VisitV1AddProblemInProblemSetResponse(ctx *fiber.Ctx) error
}

type V1AddProblemInProblemSet200JSONResponse ProblemSetResp

func (response V1AddProblemInProblemSet200JSONResponse) VisitV1AddProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AddProblemInProblemSet403JSONResponse Detail

func (response V1AddProblemInProblemSet403JSONResponse) VisitV1AddProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AddProblemInProblemSet422JSONResponse HTTPValidationError

func (response V1AddProblemInProblemSet422JSONResponse) VisitV1AddProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteProblemInProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Problem    string `json:"problem"`
}

type V1DeleteProblemInProblemSetResponseObject interface {
	VisitV1DeleteProblemInProblemSetResponse(ctx *fiber.Ctx) error
}

type V1DeleteProblemInProblemSet200JSONResponse ProblemSetResp

func (response V1DeleteProblemInProblemSet200JSONResponse) VisitV1DeleteProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteProblemInProblemSet403JSONResponse Detail

func (response V1DeleteProblemInProblemSet403JSONResponse) VisitV1DeleteProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteProblemInProblemSet422JSONResponse HTTPValidationError

func (response V1DeleteProblemInProblemSet422JSONResponse) VisitV1DeleteProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetProblemInProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Problem    string `json:"problem"`
}

type V1GetProblemInProblemSetResponseObject interface {
	VisitV1GetProblemInProblemSetResponse(ctx *fiber.Ctx) error
}

type V1GetProblemInProblemSet200JSONResponse ProblemDetailWithLatestRecordResp

func (response V1GetProblemInProblemSet200JSONResponse) VisitV1GetProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetProblemInProblemSet403JSONResponse Detail

func (response V1GetProblemInProblemSet403JSONResponse) VisitV1GetProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetProblemInProblemSet422JSONResponse HTTPValidationError

func (response V1GetProblemInProblemSet422JSONResponse) VisitV1GetProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateProblemInProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Problem    string `json:"problem"`
	Body       *V1UpdateProblemInProblemSetJSONRequestBody
}

type V1UpdateProblemInProblemSetResponseObject interface {
	VisitV1UpdateProblemInProblemSetResponse(ctx *fiber.Ctx) error
}

type V1UpdateProblemInProblemSet200JSONResponse ProblemSetResp

func (response V1UpdateProblemInProblemSet200JSONResponse) VisitV1UpdateProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateProblemInProblemSet403JSONResponse Detail

func (response V1UpdateProblemInProblemSet403JSONResponse) VisitV1UpdateProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateProblemInProblemSet422JSONResponse HTTPValidationError

func (response V1UpdateProblemInProblemSet422JSONResponse) VisitV1UpdateProblemInProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblemSetRequestObject struct {
	Domain     string `json:"domain"`
	ProblemSet string `json:"problemSet"`
	Problem    string `json:"problem"`
	Body       *multipart.Reader
}

type V1SubmitSolutionToProblemSetResponseObject interface {
	VisitV1SubmitSolutionToProblemSetResponse(ctx *fiber.Ctx) error
}

type V1SubmitSolutionToProblemSet200JSONResponse RecordResp

func (response V1SubmitSolutionToProblemSet200JSONResponse) VisitV1SubmitSolutionToProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblemSet403JSONResponse Detail

func (response V1SubmitSolutionToProblemSet403JSONResponse) VisitV1SubmitSolutionToProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblemSet422JSONResponse HTTPValidationError

func (response V1SubmitSolutionToProblemSet422JSONResponse) VisitV1SubmitSolutionToProblemSetResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListProblemsRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListProblemsParams
}

type V1ListProblemsResponseObject interface {
	VisitV1ListProblemsResponse(ctx *fiber.Ctx) error
}

type V1ListProblems200JSONResponse ProblemWithLatestRecordListResp

func (response V1ListProblems200JSONResponse) VisitV1ListProblemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListProblems403JSONResponse Detail

func (response V1ListProblems403JSONResponse) VisitV1ListProblemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblems422JSONResponse HTTPValidationError

func (response V1ListProblems422JSONResponse) VisitV1ListProblemsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CreateProblemRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1CreateProblemJSONRequestBody
}

type V1CreateProblemResponseObject interface {
	VisitV1CreateProblemResponse(ctx *fiber.Ctx) error
}

type V1CreateProblem200JSONResponse ProblemDetailResp

func (response V1CreateProblem200JSONResponse) VisitV1CreateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CreateProblem403JSONResponse Detail

func (response V1CreateProblem403JSONResponse) VisitV1CreateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CreateProblem422JSONResponse HTTPValidationError

func (response V1CreateProblem422JSONResponse) VisitV1CreateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CloneProblemRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1CloneProblemJSONRequestBody
}

type V1CloneProblemResponseObject interface {
	VisitV1CloneProblemResponse(ctx *fiber.Ctx) error
}

type V1CloneProblem200JSONResponse ProblemListResp

func (response V1CloneProblem200JSONResponse) VisitV1CloneProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CloneProblem403JSONResponse Detail

func (response V1CloneProblem403JSONResponse) VisitV1CloneProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CloneProblem422JSONResponse HTTPValidationError

func (response V1CloneProblem422JSONResponse) VisitV1CloneProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteProblemRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
}

type V1DeleteProblemResponseObject interface {
	VisitV1DeleteProblemResponse(ctx *fiber.Ctx) error
}

type V1DeleteProblem200JSONResponse EmptyResp

func (response V1DeleteProblem200JSONResponse) VisitV1DeleteProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteProblem403JSONResponse Detail

func (response V1DeleteProblem403JSONResponse) VisitV1DeleteProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteProblem422JSONResponse HTTPValidationError

func (response V1DeleteProblem422JSONResponse) VisitV1DeleteProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetProblemRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
}

type V1GetProblemResponseObject interface {
	VisitV1GetProblemResponse(ctx *fiber.Ctx) error
}

type V1GetProblem200JSONResponse ProblemDetailWithLatestRecordResp

func (response V1GetProblem200JSONResponse) VisitV1GetProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetProblem403JSONResponse Detail

func (response V1GetProblem403JSONResponse) VisitV1GetProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetProblem422JSONResponse HTTPValidationError

func (response V1GetProblem422JSONResponse) VisitV1GetProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateProblemRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Body    *V1UpdateProblemJSONRequestBody
}

type V1UpdateProblemResponseObject interface {
	VisitV1UpdateProblemResponse(ctx *fiber.Ctx) error
}

type V1UpdateProblem200JSONResponse ProblemResp

func (response V1UpdateProblem200JSONResponse) VisitV1UpdateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateProblem403JSONResponse Detail

func (response V1UpdateProblem403JSONResponse) VisitV1UpdateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateProblem422JSONResponse HTTPValidationError

func (response V1UpdateProblem422JSONResponse) VisitV1UpdateProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblemRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Body    *multipart.Reader
}

type V1SubmitSolutionToProblemResponseObject interface {
	VisitV1SubmitSolutionToProblemResponse(ctx *fiber.Ctx) error
}

type V1SubmitSolutionToProblem200JSONResponse RecordResp

func (response V1SubmitSolutionToProblem200JSONResponse) VisitV1SubmitSolutionToProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblem403JSONResponse Detail

func (response V1SubmitSolutionToProblem403JSONResponse) VisitV1SubmitSolutionToProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SubmitSolutionToProblem422JSONResponse HTTPValidationError

func (response V1SubmitSolutionToProblem422JSONResponse) VisitV1SubmitSolutionToProblemResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListProblemConfigCommitsRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Params  V1ListProblemConfigCommitsParams
}

type V1ListProblemConfigCommitsResponseObject interface {
	VisitV1ListProblemConfigCommitsResponse(ctx *fiber.Ctx) error
}

type V1ListProblemConfigCommits200JSONResponse ProblemConfigDetailListResp

func (response V1ListProblemConfigCommits200JSONResponse) VisitV1ListProblemConfigCommitsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListProblemConfigCommits403JSONResponse Detail

func (response V1ListProblemConfigCommits403JSONResponse) VisitV1ListProblemConfigCommitsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblemConfigCommits422JSONResponse HTTPValidationError

func (response V1ListProblemConfigCommits422JSONResponse) VisitV1ListProblemConfigCommitsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigByArchiveRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Params  V1UpdateProblemConfigByArchiveParams
	Body    *multipart.Reader
}

type V1UpdateProblemConfigByArchiveResponseObject interface {
	VisitV1UpdateProblemConfigByArchiveResponse(ctx *fiber.Ctx) error
}

type V1UpdateProblemConfigByArchive200JSONResponse ProblemConfigDetailResp

func (response V1UpdateProblemConfigByArchive200JSONResponse) VisitV1UpdateProblemConfigByArchiveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigByArchive403JSONResponse Detail

func (response V1UpdateProblemConfigByArchive403JSONResponse) VisitV1UpdateProblemConfigByArchiveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigByArchive422JSONResponse HTTPValidationError

func (response V1UpdateProblemConfigByArchive422JSONResponse) VisitV1UpdateProblemConfigByArchiveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigJsonRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Body    *V1UpdateProblemConfigJsonJSONRequestBody
}

type V1UpdateProblemConfigJsonResponseObject interface {
	VisitV1UpdateProblemConfigJsonResponse(ctx *fiber.Ctx) error
}

type V1UpdateProblemConfigJson200JSONResponse ProblemConfigDetailResp

func (response V1UpdateProblemConfigJson200JSONResponse) VisitV1UpdateProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigJson403JSONResponse Detail

func (response V1UpdateProblemConfigJson403JSONResponse) VisitV1UpdateProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateProblemConfigJson422JSONResponse HTTPValidationError

func (response V1UpdateProblemConfigJson422JSONResponse) VisitV1UpdateProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DiffProblemConfigDefaultBranchRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Params  V1DiffProblemConfigDefaultBranchParams
}

type V1DiffProblemConfigDefaultBranchResponseObject interface {
	VisitV1DiffProblemConfigDefaultBranchResponse(ctx *fiber.Ctx) error
}

type V1DiffProblemConfigDefaultBranch200JSONResponse DiffListResp

func (response V1DiffProblemConfigDefaultBranch200JSONResponse) VisitV1DiffProblemConfigDefaultBranchResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DiffProblemConfigDefaultBranch403JSONResponse Detail

func (response V1DiffProblemConfigDefaultBranch403JSONResponse) VisitV1DiffProblemConfigDefaultBranchResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DiffProblemConfigDefaultBranch422JSONResponse HTTPValidationError

func (response V1DiffProblemConfigDefaultBranch422JSONResponse) VisitV1DiffProblemConfigDefaultBranchResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListLatestProblemConfigObjectsUnderAGivenPrefixRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Params  V1ListLatestProblemConfigObjectsUnderAGivenPrefixParams
}

type V1ListLatestProblemConfigObjectsUnderAGivenPrefixResponseObject interface {
	VisitV1ListLatestProblemConfigObjectsUnderAGivenPrefixResponse(ctx *fiber.Ctx) error
}

type V1ListLatestProblemConfigObjectsUnderAGivenPrefix200JSONResponse ObjectStatsListResp

func (response V1ListLatestProblemConfigObjectsUnderAGivenPrefix200JSONResponse) VisitV1ListLatestProblemConfigObjectsUnderAGivenPrefixResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListLatestProblemConfigObjectsUnderAGivenPrefix403JSONResponse Detail

func (response V1ListLatestProblemConfigObjectsUnderAGivenPrefix403JSONResponse) VisitV1ListLatestProblemConfigObjectsUnderAGivenPrefixResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListLatestProblemConfigObjectsUnderAGivenPrefix422JSONResponse HTTPValidationError

func (response V1ListLatestProblemConfigObjectsUnderAGivenPrefix422JSONResponse) VisitV1ListLatestProblemConfigObjectsUnderAGivenPrefixResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DownloadProblemConfigArchiveRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Config  string `json:"config"`
	Params  V1DownloadProblemConfigArchiveParams
}

type V1DownloadProblemConfigArchiveResponseObject interface {
	VisitV1DownloadProblemConfigArchiveResponse(ctx *fiber.Ctx) error
}

// type V1DownloadProblemConfigArchive200JSONResponse interface{}

// func (response V1DownloadProblemConfigArchive200JSONResponse) VisitV1DownloadProblemConfigArchiveResponse(ctx *fiber.Ctx) error {
// 	ctx.Response().Header.Set("Content-Type", "application/json")
// 	ctx.Status(200)

// 	return ctx.JSON(&response)
// }

type V1DownloadProblemConfigArchive403JSONResponse Detail

func (response V1DownloadProblemConfigArchive403JSONResponse) VisitV1DownloadProblemConfigArchiveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DownloadProblemConfigArchive422JSONResponse HTTPValidationError

func (response V1DownloadProblemConfigArchive422JSONResponse) VisitV1DownloadProblemConfigArchiveResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetProblemConfigJsonRequestObject struct {
	Domain  string `json:"domain"`
	Problem string `json:"problem"`
	Config  string `json:"config"`
}

type V1GetProblemConfigJsonResponseObject interface {
	VisitV1GetProblemConfigJsonResponse(ctx *fiber.Ctx) error
}

type V1GetProblemConfigJson200JSONResponse ProblemConfigDataDetailResp

func (response V1GetProblemConfigJson200JSONResponse) VisitV1GetProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetProblemConfigJson403JSONResponse Detail

func (response V1GetProblemConfigJson403JSONResponse) VisitV1GetProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetProblemConfigJson422JSONResponse HTTPValidationError

func (response V1GetProblemConfigJson422JSONResponse) VisitV1GetProblemConfigJsonResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListRecordsInDomainRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListRecordsInDomainParams
}

type V1ListRecordsInDomainResponseObject interface {
	VisitV1ListRecordsInDomainResponse(ctx *fiber.Ctx) error
}

type V1ListRecordsInDomain200JSONResponse RecordListDetailListResp

func (response V1ListRecordsInDomain200JSONResponse) VisitV1ListRecordsInDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListRecordsInDomain403JSONResponse Detail

func (response V1ListRecordsInDomain403JSONResponse) VisitV1ListRecordsInDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListRecordsInDomain422JSONResponse HTTPValidationError

func (response V1ListRecordsInDomain422JSONResponse) VisitV1ListRecordsInDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetRecordRequestObject struct {
	Domain string             `json:"domain"`
	Record openapi_types.UUID `json:"record"`
}

type V1GetRecordResponseObject interface {
	VisitV1GetRecordResponse(ctx *fiber.Ctx) error
}

type V1GetRecord200JSONResponse RecordDetailResp

func (response V1GetRecord200JSONResponse) VisitV1GetRecordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetRecord403JSONResponse Detail

func (response V1GetRecord403JSONResponse) VisitV1GetRecordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetRecord422JSONResponse HTTPValidationError

func (response V1GetRecord422JSONResponse) VisitV1GetRecordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SubmitCaseByJudgerRequestObject struct {
	Domain string `json:"domain"`
	Record string `json:"record"`
	Index  int    `json:"index"`
	Body   *V1SubmitCaseByJudgerJSONRequestBody
}

type V1SubmitCaseByJudgerResponseObject interface {
	VisitV1SubmitCaseByJudgerResponse(ctx *fiber.Ctx) error
}

type V1SubmitCaseByJudger200JSONResponse EmptyResp

func (response V1SubmitCaseByJudger200JSONResponse) VisitV1SubmitCaseByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SubmitCaseByJudger403JSONResponse Detail

func (response V1SubmitCaseByJudger403JSONResponse) VisitV1SubmitCaseByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SubmitCaseByJudger422JSONResponse HTTPValidationError

func (response V1SubmitCaseByJudger422JSONResponse) VisitV1SubmitCaseByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1SubmitRecordByJudgerRequestObject struct {
	Domain string `json:"domain"`
	Record string `json:"record"`
	Body   *V1SubmitRecordByJudgerJSONRequestBody
}

type V1SubmitRecordByJudgerResponseObject interface {
	VisitV1SubmitRecordByJudgerResponse(ctx *fiber.Ctx) error
}

type V1SubmitRecordByJudger200JSONResponse EmptyResp

func (response V1SubmitRecordByJudger200JSONResponse) VisitV1SubmitRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1SubmitRecordByJudger403JSONResponse Detail

func (response V1SubmitRecordByJudger403JSONResponse) VisitV1SubmitRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1SubmitRecordByJudger422JSONResponse HTTPValidationError

func (response V1SubmitRecordByJudger422JSONResponse) VisitV1SubmitRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ClaimRecordByJudgerRequestObject struct {
	Domain string `json:"domain"`
	Record string `json:"record"`
	Body   *V1ClaimRecordByJudgerJSONRequestBody
}

type V1ClaimRecordByJudgerResponseObject interface {
	VisitV1ClaimRecordByJudgerResponse(ctx *fiber.Ctx) error
}

type V1ClaimRecordByJudger200JSONResponse JudgerCredentialsResp

func (response V1ClaimRecordByJudger200JSONResponse) VisitV1ClaimRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ClaimRecordByJudger403JSONResponse Detail

func (response V1ClaimRecordByJudger403JSONResponse) VisitV1ClaimRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ClaimRecordByJudger422JSONResponse HTTPValidationError

func (response V1ClaimRecordByJudger422JSONResponse) VisitV1ClaimRecordByJudgerResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListDomainRolesRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListDomainRolesParams
}

type V1ListDomainRolesResponseObject interface {
	VisitV1ListDomainRolesResponse(ctx *fiber.Ctx) error
}

type V1ListDomainRoles200JSONResponse DomainRoleListResp

func (response V1ListDomainRoles200JSONResponse) VisitV1ListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListDomainRoles403JSONResponse Detail

func (response V1ListDomainRoles403JSONResponse) VisitV1ListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListDomainRoles422JSONResponse HTTPValidationError

func (response V1ListDomainRoles422JSONResponse) VisitV1ListDomainRolesResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1CreateDomainRoleRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1CreateDomainRoleJSONRequestBody
}

type V1CreateDomainRoleResponseObject interface {
	VisitV1CreateDomainRoleResponse(ctx *fiber.Ctx) error
}

type V1CreateDomainRole200JSONResponse DomainRoleResp

func (response V1CreateDomainRole200JSONResponse) VisitV1CreateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1CreateDomainRole403JSONResponse Detail

func (response V1CreateDomainRole403JSONResponse) VisitV1CreateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1CreateDomainRole422JSONResponse HTTPValidationError

func (response V1CreateDomainRole422JSONResponse) VisitV1CreateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1DeleteDomainRoleRequestObject struct {
	Domain string `json:"domain"`
	Role   string `json:"role"`
}

type V1DeleteDomainRoleResponseObject interface {
	VisitV1DeleteDomainRoleResponse(ctx *fiber.Ctx) error
}

type V1DeleteDomainRole200JSONResponse EmptyResp

func (response V1DeleteDomainRole200JSONResponse) VisitV1DeleteDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1DeleteDomainRole403JSONResponse Detail

func (response V1DeleteDomainRole403JSONResponse) VisitV1DeleteDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1DeleteDomainRole422JSONResponse HTTPValidationError

func (response V1DeleteDomainRole422JSONResponse) VisitV1DeleteDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetDomainRoleRequestObject struct {
	Domain string `json:"domain"`
	Role   string `json:"role"`
}

type V1GetDomainRoleResponseObject interface {
	VisitV1GetDomainRoleResponse(ctx *fiber.Ctx) error
}

type V1GetDomainRole200JSONResponse DomainRoleDetailResp

func (response V1GetDomainRole200JSONResponse) VisitV1GetDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetDomainRole403JSONResponse Detail

func (response V1GetDomainRole403JSONResponse) VisitV1GetDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetDomainRole422JSONResponse HTTPValidationError

func (response V1GetDomainRole422JSONResponse) VisitV1GetDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateDomainRoleRequestObject struct {
	Domain string `json:"domain"`
	Role   string `json:"role"`
	Body   *V1UpdateDomainRoleJSONRequestBody
}

type V1UpdateDomainRoleResponseObject interface {
	VisitV1UpdateDomainRoleResponse(ctx *fiber.Ctx) error
}

type V1UpdateDomainRole200JSONResponse DomainRoleResp

func (response V1UpdateDomainRole200JSONResponse) VisitV1UpdateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateDomainRole403JSONResponse Detail

func (response V1UpdateDomainRole403JSONResponse) VisitV1UpdateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateDomainRole422JSONResponse HTTPValidationError

func (response V1UpdateDomainRole422JSONResponse) VisitV1UpdateDomainRoleResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1TransferDomainRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1TransferDomainJSONRequestBody
}

type V1TransferDomainResponseObject interface {
	VisitV1TransferDomainResponse(ctx *fiber.Ctx) error
}

type V1TransferDomain200JSONResponse DomainResp

func (response V1TransferDomain200JSONResponse) VisitV1TransferDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1TransferDomain403JSONResponse Detail

func (response V1TransferDomain403JSONResponse) VisitV1TransferDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1TransferDomain422JSONResponse HTTPValidationError

func (response V1TransferDomain422JSONResponse) VisitV1TransferDomainResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ListDomainUsersRequestObject struct {
	Domain string `json:"domain"`
	Params V1ListDomainUsersParams
}

type V1ListDomainUsersResponseObject interface {
	VisitV1ListDomainUsersResponse(ctx *fiber.Ctx) error
}

type V1ListDomainUsers200JSONResponse UserWithDomainRoleListResp

func (response V1ListDomainUsers200JSONResponse) VisitV1ListDomainUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListDomainUsers403JSONResponse Detail

func (response V1ListDomainUsers403JSONResponse) VisitV1ListDomainUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListDomainUsers422JSONResponse HTTPValidationError

func (response V1ListDomainUsers422JSONResponse) VisitV1ListDomainUsersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1AddDomainUserRequestObject struct {
	Domain string `json:"domain"`
	Body   *V1AddDomainUserJSONRequestBody
}

type V1AddDomainUserResponseObject interface {
	VisitV1AddDomainUserResponse(ctx *fiber.Ctx) error
}

type V1AddDomainUser200JSONResponse UserDetailWithDomainRoleResp

func (response V1AddDomainUser200JSONResponse) VisitV1AddDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1AddDomainUser403JSONResponse Detail

func (response V1AddDomainUser403JSONResponse) VisitV1AddDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1AddDomainUser422JSONResponse HTTPValidationError

func (response V1AddDomainUser422JSONResponse) VisitV1AddDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1RemoveDomainUserRequestObject struct {
	Domain string `json:"domain"`
	User   string `json:"user"`
}

type V1RemoveDomainUserResponseObject interface {
	VisitV1RemoveDomainUserResponse(ctx *fiber.Ctx) error
}

type V1RemoveDomainUser200JSONResponse EmptyResp

func (response V1RemoveDomainUser200JSONResponse) VisitV1RemoveDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1RemoveDomainUser403JSONResponse Detail

func (response V1RemoveDomainUser403JSONResponse) VisitV1RemoveDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1RemoveDomainUser422JSONResponse HTTPValidationError

func (response V1RemoveDomainUser422JSONResponse) VisitV1RemoveDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetDomainUserRequestObject struct {
	Domain string `json:"domain"`
	User   string `json:"user"`
}

type V1GetDomainUserResponseObject interface {
	VisitV1GetDomainUserResponse(ctx *fiber.Ctx) error
}

type V1GetDomainUser200JSONResponse UserWithDomainRoleResp

func (response V1GetDomainUser200JSONResponse) VisitV1GetDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetDomainUser403JSONResponse Detail

func (response V1GetDomainUser403JSONResponse) VisitV1GetDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetDomainUser422JSONResponse HTTPValidationError

func (response V1GetDomainUser422JSONResponse) VisitV1GetDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1UpdateDomainUserRequestObject struct {
	Domain string `json:"domain"`
	User   string `json:"user"`
	Body   *V1UpdateDomainUserJSONRequestBody
}

type V1UpdateDomainUserResponseObject interface {
	VisitV1UpdateDomainUserResponse(ctx *fiber.Ctx) error
}

type V1UpdateDomainUser200JSONResponse UserDetailWithDomainRoleResp

func (response V1UpdateDomainUser200JSONResponse) VisitV1UpdateDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateDomainUser403JSONResponse Detail

func (response V1UpdateDomainUser403JSONResponse) VisitV1UpdateDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateDomainUser422JSONResponse HTTPValidationError

func (response V1UpdateDomainUser422JSONResponse) VisitV1UpdateDomainUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetDomainUserPermissionRequestObject struct {
	Domain string `json:"domain"`
	User   string `json:"user"`
}

type V1GetDomainUserPermissionResponseObject interface {
	VisitV1GetDomainUserPermissionResponse(ctx *fiber.Ctx) error
}

type V1GetDomainUserPermission200JSONResponse DomainUserPermissionResp

func (response V1GetDomainUserPermission200JSONResponse) VisitV1GetDomainUserPermissionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetDomainUserPermission403JSONResponse Detail

func (response V1GetDomainUserPermission403JSONResponse) VisitV1GetDomainUserPermissionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetDomainUserPermission422JSONResponse HTTPValidationError

func (response V1GetDomainUserPermission422JSONResponse) VisitV1GetDomainUserPermissionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1JwtDecodedRequestObject struct {
}

type V1JwtDecodedResponseObject interface {
	VisitV1JwtDecodedResponse(ctx *fiber.Ctx) error
}

type V1JwtDecoded200JSONResponse JWTAccessTokenResp

func (response V1JwtDecoded200JSONResponse) VisitV1JwtDecodedResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1JwtDecoded403JSONResponse Detail

func (response V1JwtDecoded403JSONResponse) VisitV1JwtDecodedResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblemGroupsRequestObject struct {
	Params V1ListProblemGroupsParams
}

type V1ListProblemGroupsResponseObject interface {
	VisitV1ListProblemGroupsResponse(ctx *fiber.Ctx) error
}

type V1ListProblemGroups200JSONResponse ProblemGroupListResp

func (response V1ListProblemGroups200JSONResponse) VisitV1ListProblemGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ListProblemGroups403JSONResponse Detail

func (response V1ListProblemGroups403JSONResponse) VisitV1ListProblemGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ListProblemGroups422JSONResponse HTTPValidationError

func (response V1ListProblemGroups422JSONResponse) VisitV1ListProblemGroupsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1TestErrorReportRequestObject struct {
}

type V1TestErrorReportResponseObject interface {
	VisitV1TestErrorReportResponse(ctx *fiber.Ctx) error
}

type V1TestErrorReport200JSONResponse EmptyResp

func (response V1TestErrorReport200JSONResponse) VisitV1TestErrorReportResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1TestErrorReport403JSONResponse Detail

func (response V1TestErrorReport403JSONResponse) VisitV1TestErrorReportResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetCurrentUserRequestObject struct {
}

type V1GetCurrentUserResponseObject interface {
	VisitV1GetCurrentUserResponse(ctx *fiber.Ctx) error
}

type V1GetCurrentUser200JSONResponse UserDetailResp

func (response V1GetCurrentUser200JSONResponse) VisitV1GetCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetCurrentUser403JSONResponse Detail

func (response V1GetCurrentUser403JSONResponse) VisitV1GetCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateCurrentUserRequestObject struct {
	Body *V1UpdateCurrentUserJSONRequestBody
}

type V1UpdateCurrentUserResponseObject interface {
	VisitV1UpdateCurrentUserResponse(ctx *fiber.Ctx) error
}

type V1UpdateCurrentUser200JSONResponse UserDetailResp

func (response V1UpdateCurrentUser200JSONResponse) VisitV1UpdateCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1UpdateCurrentUser403JSONResponse Detail

func (response V1UpdateCurrentUser403JSONResponse) VisitV1UpdateCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1UpdateCurrentUser422JSONResponse HTTPValidationError

func (response V1UpdateCurrentUser422JSONResponse) VisitV1UpdateCurrentUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1ChangePasswordRequestObject struct {
	Body *V1ChangePasswordJSONRequestBody
}

type V1ChangePasswordResponseObject interface {
	VisitV1ChangePasswordResponse(ctx *fiber.Ctx) error
}

type V1ChangePassword200JSONResponse UserDetailResp

func (response V1ChangePassword200JSONResponse) VisitV1ChangePasswordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1ChangePassword403JSONResponse Detail

func (response V1ChangePassword403JSONResponse) VisitV1ChangePasswordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1ChangePassword422JSONResponse HTTPValidationError

func (response V1ChangePassword422JSONResponse) VisitV1ChangePasswordResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1GetUserRequestObject struct {
	Uid string `json:"uid"`
}

type V1GetUserResponseObject interface {
	VisitV1GetUserResponse(ctx *fiber.Ctx) error
}

type V1GetUser200JSONResponse UserPreviewResp

func (response V1GetUser200JSONResponse) VisitV1GetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1GetUser403JSONResponse Detail

func (response V1GetUser403JSONResponse) VisitV1GetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

type V1GetUser422JSONResponse HTTPValidationError

func (response V1GetUser422JSONResponse) VisitV1GetUserResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(422)

	return ctx.JSON(&response)
}

type V1VersionRequestObject struct {
}

type V1VersionResponseObject interface {
	VisitV1VersionResponse(ctx *fiber.Ctx) error
}

type V1Version200JSONResponse Version

func (response V1Version200JSONResponse) VisitV1VersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type V1Version403JSONResponse Detail

func (response V1Version403JSONResponse) VisitV1VersionResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(403)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Admin List Domain Roles
	// (GET /admin/domain_roles)
	V1AdminListDomainRoles(ctx context.Context, request V1AdminListDomainRolesRequestObject) (V1AdminListDomainRolesResponseObject, error)
	// Admin List Judgers
	// (GET /admin/judgers)
	V1AdminListJudgers(ctx context.Context, request V1AdminListJudgersRequestObject) (V1AdminListJudgersResponseObject, error)
	// Admin Create Judger
	// (POST /admin/judgers)
	V1AdminCreateJudger(ctx context.Context, request V1AdminCreateJudgerRequestObject) (V1AdminCreateJudgerResponseObject, error)
	// Admin List Users
	// (GET /admin/users)
	V1AdminListUsers(ctx context.Context, request V1AdminListUsersRequestObject) (V1AdminListUsersResponseObject, error)
	// Admin Get User
	// (GET /admin/{uid})
	V1AdminGetUser(ctx context.Context, request V1AdminGetUserRequestObject) (V1AdminGetUserResponseObject, error)
	// Admin List User Domains
	// (GET /admin/{uid}/domains)
	V1AdminListUserDomains(ctx context.Context, request V1AdminListUserDomainsRequestObject) (V1AdminListUserDomainsResponseObject, error)
	// Login
	// (POST /auth/login)
	V1Login(ctx context.Context, request V1LoginRequestObject) (V1LoginResponseObject, error)
	// Logout
	// (POST /auth/logout)
	V1Logout(ctx context.Context, request V1LogoutRequestObject) (V1LogoutResponseObject, error)
	// List Oauth2
	// (GET /auth/oauth2)
	V1ListOauth2(ctx context.Context, request V1ListOauth2RequestObject) (V1ListOauth2ResponseObject, error)
	// Oauth Authorize
	// (GET /auth/oauth2/{oauth2}/authorize)
	V1OauthAuthorize(ctx context.Context, request V1OauthAuthorizeRequestObject) (V1OauthAuthorizeResponseObject, error)
	// Refresh
	// (POST /auth/refresh)
	V1Refresh(ctx context.Context, request V1RefreshRequestObject) (V1RefreshResponseObject, error)
	// Register
	// (POST /auth/register)
	V1Register(ctx context.Context, request V1RegisterRequestObject) (V1RegisterResponseObject, error)
	// Get Token
	// (GET /auth/token)
	V1GetToken(ctx context.Context, request V1GetTokenRequestObject) (V1GetTokenResponseObject, error)
	// List Domains
	// (GET /domains)
	V1ListDomains(ctx context.Context, request V1ListDomainsRequestObject) (V1ListDomainsResponseObject, error)
	// Create Domain
	// (POST /domains)
	V1CreateDomain(ctx context.Context, request V1CreateDomainRequestObject) (V1CreateDomainResponseObject, error)
	// Search Domain Groups
	// (GET /domains/groups)
	V1SearchDomainGroups(ctx context.Context, request V1SearchDomainGroupsRequestObject) (V1SearchDomainGroupsResponseObject, error)
	// Delete Domain
	// (DELETE /domains/{domain})
	V1DeleteDomain(ctx context.Context, request V1DeleteDomainRequestObject) (V1DeleteDomainResponseObject, error)
	// Get Domain
	// (GET /domains/{domain})
	V1GetDomain(ctx context.Context, request V1GetDomainRequestObject) (V1GetDomainResponseObject, error)
	// Update Domain
	// (PATCH /domains/{domain})
	V1UpdateDomain(ctx context.Context, request V1UpdateDomainRequestObject) (V1UpdateDomainResponseObject, error)
	// Search Domain Candidates
	// (GET /domains/{domain}/candidates)
	V1SearchDomainCandidates(ctx context.Context, request V1SearchDomainCandidatesRequestObject) (V1SearchDomainCandidatesResponseObject, error)
	// List Domain Invitations
	// (GET /domains/{domain}/invitations)
	V1ListDomainInvitations(ctx context.Context, request V1ListDomainInvitationsRequestObject) (V1ListDomainInvitationsResponseObject, error)
	// Create Domain Invitation
	// (POST /domains/{domain}/invitations)
	V1CreateDomainInvitation(ctx context.Context, request V1CreateDomainInvitationRequestObject) (V1CreateDomainInvitationResponseObject, error)
	// Delete Domain Invitation
	// (DELETE /domains/{domain}/invitations/{invitation})
	V1DeleteDomainInvitation(ctx context.Context, request V1DeleteDomainInvitationRequestObject) (V1DeleteDomainInvitationResponseObject, error)
	// Get Domain Invitation
	// (GET /domains/{domain}/invitations/{invitation})
	V1GetDomainInvitation(ctx context.Context, request V1GetDomainInvitationRequestObject) (V1GetDomainInvitationResponseObject, error)
	// Update Domain Invitation
	// (PATCH /domains/{domain}/invitations/{invitation})
	V1UpdateDomainInvitation(ctx context.Context, request V1UpdateDomainInvitationRequestObject) (V1UpdateDomainInvitationResponseObject, error)
	// Join Domain By Invitation
	// (POST /domains/{domain}/join)
	V1JoinDomainByInvitation(ctx context.Context, request V1JoinDomainByInvitationRequestObject) (V1JoinDomainByInvitationResponseObject, error)
	// List Problem Sets
	// (GET /domains/{domain}/problem_sets)
	V1ListProblemSets(ctx context.Context, request V1ListProblemSetsRequestObject) (V1ListProblemSetsResponseObject, error)
	// Create Problem Set
	// (POST /domains/{domain}/problem_sets)
	V1CreateProblemSet(ctx context.Context, request V1CreateProblemSetRequestObject) (V1CreateProblemSetResponseObject, error)
	// Delete Problem Set
	// (DELETE /domains/{domain}/problem_sets/{problemSet})
	V1DeleteProblemSet(ctx context.Context, request V1DeleteProblemSetRequestObject) (V1DeleteProblemSetResponseObject, error)
	// Get Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet})
	V1GetProblemSet(ctx context.Context, request V1GetProblemSetRequestObject) (V1GetProblemSetResponseObject, error)
	// Update Problem Set
	// (PATCH /domains/{domain}/problem_sets/{problemSet})
	V1UpdateProblemSet(ctx context.Context, request V1UpdateProblemSetRequestObject) (V1UpdateProblemSetResponseObject, error)
	// List Problems In Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet}/problems)
	V1ListProblemsInProblemSet(ctx context.Context, request V1ListProblemsInProblemSetRequestObject) (V1ListProblemsInProblemSetResponseObject, error)
	// Add Problem In Problem Set
	// (POST /domains/{domain}/problem_sets/{problemSet}/problems)
	V1AddProblemInProblemSet(ctx context.Context, request V1AddProblemInProblemSetRequestObject) (V1AddProblemInProblemSetResponseObject, error)
	// Delete Problem In Problem Set
	// (DELETE /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1DeleteProblemInProblemSet(ctx context.Context, request V1DeleteProblemInProblemSetRequestObject) (V1DeleteProblemInProblemSetResponseObject, error)
	// Get Problem In Problem Set
	// (GET /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1GetProblemInProblemSet(ctx context.Context, request V1GetProblemInProblemSetRequestObject) (V1GetProblemInProblemSetResponseObject, error)
	// Update Problem In Problem Set
	// (PATCH /domains/{domain}/problem_sets/{problemSet}/problems/{problem})
	V1UpdateProblemInProblemSet(ctx context.Context, request V1UpdateProblemInProblemSetRequestObject) (V1UpdateProblemInProblemSetResponseObject, error)
	// Submit Solution To Problem Set
	// (POST /domains/{domain}/problem_sets/{problemSet}/problems/{problem}/submit)
	V1SubmitSolutionToProblemSet(ctx context.Context, request V1SubmitSolutionToProblemSetRequestObject) (V1SubmitSolutionToProblemSetResponseObject, error)
	// List Problems
	// (GET /domains/{domain}/problems)
	V1ListProblems(ctx context.Context, request V1ListProblemsRequestObject) (V1ListProblemsResponseObject, error)
	// Create Problem
	// (POST /domains/{domain}/problems)
	V1CreateProblem(ctx context.Context, request V1CreateProblemRequestObject) (V1CreateProblemResponseObject, error)
	// Clone Problem
	// (POST /domains/{domain}/problems/clone)
	V1CloneProblem(ctx context.Context, request V1CloneProblemRequestObject) (V1CloneProblemResponseObject, error)
	// Delete Problem
	// (DELETE /domains/{domain}/problems/{problem})
	V1DeleteProblem(ctx context.Context, request V1DeleteProblemRequestObject) (V1DeleteProblemResponseObject, error)
	// Get Problem
	// (GET /domains/{domain}/problems/{problem})
	V1GetProblem(ctx context.Context, request V1GetProblemRequestObject) (V1GetProblemResponseObject, error)
	// Update Problem
	// (PATCH /domains/{domain}/problems/{problem})
	V1UpdateProblem(ctx context.Context, request V1UpdateProblemRequestObject) (V1UpdateProblemResponseObject, error)
	// Submit Solution To Problem
	// (POST /domains/{domain}/problems/{problem})
	V1SubmitSolutionToProblem(ctx context.Context, request V1SubmitSolutionToProblemRequestObject) (V1SubmitSolutionToProblemResponseObject, error)
	// List Problem Config Commits
	// (GET /domains/{domain}/problems/{problem}/configs)
	V1ListProblemConfigCommits(ctx context.Context, request V1ListProblemConfigCommitsRequestObject) (V1ListProblemConfigCommitsResponseObject, error)
	// Update Problem Config By Archive
	// (POST /domains/{domain}/problems/{problem}/configs)
	V1UpdateProblemConfigByArchive(ctx context.Context, request V1UpdateProblemConfigByArchiveRequestObject) (V1UpdateProblemConfigByArchiveResponseObject, error)
	// Update Problem Config Json
	// (POST /domains/{domain}/problems/{problem}/configs/json)
	V1UpdateProblemConfigJson(ctx context.Context, request V1UpdateProblemConfigJsonRequestObject) (V1UpdateProblemConfigJsonResponseObject, error)
	// Diff Problem Config Default Branch
	// (GET /domains/{domain}/problems/{problem}/configs/latest/diff)
	V1DiffProblemConfigDefaultBranch(ctx context.Context, request V1DiffProblemConfigDefaultBranchRequestObject) (V1DiffProblemConfigDefaultBranchResponseObject, error)
	// List Latest Problem Config Objects Under A Given Prefix
	// (GET /domains/{domain}/problems/{problem}/configs/latest/ls)
	V1ListLatestProblemConfigObjectsUnderAGivenPrefix(ctx context.Context, request V1ListLatestProblemConfigObjectsUnderAGivenPrefixRequestObject) (V1ListLatestProblemConfigObjectsUnderAGivenPrefixResponseObject, error)
	// Download Problem Config Archive
	// (GET /domains/{domain}/problems/{problem}/configs/{config})
	V1DownloadProblemConfigArchive(ctx context.Context, request V1DownloadProblemConfigArchiveRequestObject) (V1DownloadProblemConfigArchiveResponseObject, error)
	// Get Problem Config Json
	// (GET /domains/{domain}/problems/{problem}/configs/{config}/json)
	V1GetProblemConfigJson(ctx context.Context, request V1GetProblemConfigJsonRequestObject) (V1GetProblemConfigJsonResponseObject, error)
	// List Records In Domain
	// (GET /domains/{domain}/records)
	V1ListRecordsInDomain(ctx context.Context, request V1ListRecordsInDomainRequestObject) (V1ListRecordsInDomainResponseObject, error)
	// Get Record
	// (GET /domains/{domain}/records/{record})
	V1GetRecord(ctx context.Context, request V1GetRecordRequestObject) (V1GetRecordResponseObject, error)
	// Submit Case By Judger
	// (PUT /domains/{domain}/records/{record}/cases/{index}/judge)
	V1SubmitCaseByJudger(ctx context.Context, request V1SubmitCaseByJudgerRequestObject) (V1SubmitCaseByJudgerResponseObject, error)
	// Submit Record By Judger
	// (PUT /domains/{domain}/records/{record}/judge)
	V1SubmitRecordByJudger(ctx context.Context, request V1SubmitRecordByJudgerRequestObject) (V1SubmitRecordByJudgerResponseObject, error)
	// Claim Record By Judger
	// (POST /domains/{domain}/records/{record}/judge/claim)
	V1ClaimRecordByJudger(ctx context.Context, request V1ClaimRecordByJudgerRequestObject) (V1ClaimRecordByJudgerResponseObject, error)
	// List Domain Roles
	// (GET /domains/{domain}/roles)
	V1ListDomainRoles(ctx context.Context, request V1ListDomainRolesRequestObject) (V1ListDomainRolesResponseObject, error)
	// Create Domain Role
	// (POST /domains/{domain}/roles)
	V1CreateDomainRole(ctx context.Context, request V1CreateDomainRoleRequestObject) (V1CreateDomainRoleResponseObject, error)
	// Delete Domain Role
	// (DELETE /domains/{domain}/roles/{role})
	V1DeleteDomainRole(ctx context.Context, request V1DeleteDomainRoleRequestObject) (V1DeleteDomainRoleResponseObject, error)
	// Get Domain Role
	// (GET /domains/{domain}/roles/{role})
	V1GetDomainRole(ctx context.Context, request V1GetDomainRoleRequestObject) (V1GetDomainRoleResponseObject, error)
	// Update Domain Role
	// (PATCH /domains/{domain}/roles/{role})
	V1UpdateDomainRole(ctx context.Context, request V1UpdateDomainRoleRequestObject) (V1UpdateDomainRoleResponseObject, error)
	// Transfer Domain
	// (POST /domains/{domain}/transfer)
	V1TransferDomain(ctx context.Context, request V1TransferDomainRequestObject) (V1TransferDomainResponseObject, error)
	// List Domain Users
	// (GET /domains/{domain}/users)
	V1ListDomainUsers(ctx context.Context, request V1ListDomainUsersRequestObject) (V1ListDomainUsersResponseObject, error)
	// Add Domain User
	// (POST /domains/{domain}/users)
	V1AddDomainUser(ctx context.Context, request V1AddDomainUserRequestObject) (V1AddDomainUserResponseObject, error)
	// Remove Domain User
	// (DELETE /domains/{domain}/users/{user})
	V1RemoveDomainUser(ctx context.Context, request V1RemoveDomainUserRequestObject) (V1RemoveDomainUserResponseObject, error)
	// Get Domain User
	// (GET /domains/{domain}/users/{user})
	V1GetDomainUser(ctx context.Context, request V1GetDomainUserRequestObject) (V1GetDomainUserResponseObject, error)
	// Update Domain User
	// (PATCH /domains/{domain}/users/{user})
	V1UpdateDomainUser(ctx context.Context, request V1UpdateDomainUserRequestObject) (V1UpdateDomainUserResponseObject, error)
	// Get Domain User Permission
	// (GET /domains/{domain}/users/{user}/permission)
	V1GetDomainUserPermission(ctx context.Context, request V1GetDomainUserPermissionRequestObject) (V1GetDomainUserPermissionResponseObject, error)
	// Jwt Decoded
	// (GET /jwt_decoded)
	V1JwtDecoded(ctx context.Context, request V1JwtDecodedRequestObject) (V1JwtDecodedResponseObject, error)
	// List Problem Groups
	// (GET /problem_groups)
	V1ListProblemGroups(ctx context.Context, request V1ListProblemGroupsRequestObject) (V1ListProblemGroupsResponseObject, error)
	// Test Error Report
	// (GET /test/report)
	V1TestErrorReport(ctx context.Context, request V1TestErrorReportRequestObject) (V1TestErrorReportResponseObject, error)
	// Get Current User
	// (GET /users/me)
	V1GetCurrentUser(ctx context.Context, request V1GetCurrentUserRequestObject) (V1GetCurrentUserResponseObject, error)
	// Update Current User
	// (PATCH /users/me)
	V1UpdateCurrentUser(ctx context.Context, request V1UpdateCurrentUserRequestObject) (V1UpdateCurrentUserResponseObject, error)
	// Change Password
	// (PATCH /users/me/password)
	V1ChangePassword(ctx context.Context, request V1ChangePasswordRequestObject) (V1ChangePasswordResponseObject, error)
	// Get User
	// (GET /users/{uid})
	V1GetUser(ctx context.Context, request V1GetUserRequestObject) (V1GetUserResponseObject, error)
	// Version
	// (GET /version)
	V1Version(ctx context.Context, request V1VersionRequestObject) (V1VersionResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// V1AdminListDomainRoles operation middleware
func (sh *strictHandler) V1AdminListDomainRoles(ctx *fiber.Ctx, params V1AdminListDomainRolesParams) error {
	var request V1AdminListDomainRolesRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminListDomainRoles(ctx.UserContext(), request.(V1AdminListDomainRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminListDomainRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminListDomainRolesResponseObject); ok {
		if err := validResponse.VisitV1AdminListDomainRolesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AdminListJudgers operation middleware
func (sh *strictHandler) V1AdminListJudgers(ctx *fiber.Ctx, params V1AdminListJudgersParams) error {
	var request V1AdminListJudgersRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminListJudgers(ctx.UserContext(), request.(V1AdminListJudgersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminListJudgers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminListJudgersResponseObject); ok {
		if err := validResponse.VisitV1AdminListJudgersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AdminCreateJudger operation middleware
func (sh *strictHandler) V1AdminCreateJudger(ctx *fiber.Ctx) error {
	var request V1AdminCreateJudgerRequestObject

	var body V1AdminCreateJudgerJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminCreateJudger(ctx.UserContext(), request.(V1AdminCreateJudgerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminCreateJudger")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminCreateJudgerResponseObject); ok {
		if err := validResponse.VisitV1AdminCreateJudgerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AdminListUsers operation middleware
func (sh *strictHandler) V1AdminListUsers(ctx *fiber.Ctx, params V1AdminListUsersParams) error {
	var request V1AdminListUsersRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminListUsers(ctx.UserContext(), request.(V1AdminListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminListUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminListUsersResponseObject); ok {
		if err := validResponse.VisitV1AdminListUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AdminGetUser operation middleware
func (sh *strictHandler) V1AdminGetUser(ctx *fiber.Ctx, uid string) error {
	var request V1AdminGetUserRequestObject

	request.Uid = uid

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminGetUser(ctx.UserContext(), request.(V1AdminGetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminGetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminGetUserResponseObject); ok {
		if err := validResponse.VisitV1AdminGetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AdminListUserDomains operation middleware
func (sh *strictHandler) V1AdminListUserDomains(ctx *fiber.Ctx, uid string, params V1AdminListUserDomainsParams) error {
	var request V1AdminListUserDomainsRequestObject

	request.Uid = uid
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AdminListUserDomains(ctx.UserContext(), request.(V1AdminListUserDomainsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AdminListUserDomains")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AdminListUserDomainsResponseObject); ok {
		if err := validResponse.VisitV1AdminListUserDomainsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1Login operation middleware
func (sh *strictHandler) V1Login(ctx *fiber.Ctx, params V1LoginParams) error {
	var request V1LoginRequestObject

	request.Params = params

	var body V1LoginFormdataRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1Login(ctx.UserContext(), request.(V1LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1LoginResponseObject); ok {
		if err := validResponse.VisitV1LoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1Logout operation middleware
func (sh *strictHandler) V1Logout(ctx *fiber.Ctx, params V1LogoutParams) error {
	var request V1LogoutRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1Logout(ctx.UserContext(), request.(V1LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1LogoutResponseObject); ok {
		if err := validResponse.VisitV1LogoutResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListOauth2 operation middleware
func (sh *strictHandler) V1ListOauth2(ctx *fiber.Ctx) error {
	var request V1ListOauth2RequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListOauth2(ctx.UserContext(), request.(V1ListOauth2RequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListOauth2")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListOauth2ResponseObject); ok {
		if err := validResponse.VisitV1ListOauth2Response(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1OauthAuthorize operation middleware
func (sh *strictHandler) V1OauthAuthorize(ctx *fiber.Ctx, oauth2 string, params V1OauthAuthorizeParams) error {
	var request V1OauthAuthorizeRequestObject

	request.Oauth2 = oauth2
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1OauthAuthorize(ctx.UserContext(), request.(V1OauthAuthorizeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1OauthAuthorize")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1OauthAuthorizeResponseObject); ok {
		if err := validResponse.VisitV1OauthAuthorizeResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1Refresh operation middleware
func (sh *strictHandler) V1Refresh(ctx *fiber.Ctx, params V1RefreshParams) error {
	var request V1RefreshRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1Refresh(ctx.UserContext(), request.(V1RefreshRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Refresh")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1RefreshResponseObject); ok {
		if err := validResponse.VisitV1RefreshResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1Register operation middleware
func (sh *strictHandler) V1Register(ctx *fiber.Ctx, params V1RegisterParams) error {
	var request V1RegisterRequestObject

	request.Params = params

	var body V1RegisterJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1Register(ctx.UserContext(), request.(V1RegisterRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Register")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1RegisterResponseObject); ok {
		if err := validResponse.VisitV1RegisterResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetToken operation middleware
func (sh *strictHandler) V1GetToken(ctx *fiber.Ctx, params V1GetTokenParams) error {
	var request V1GetTokenRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetToken(ctx.UserContext(), request.(V1GetTokenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetToken")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetTokenResponseObject); ok {
		if err := validResponse.VisitV1GetTokenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListDomains operation middleware
func (sh *strictHandler) V1ListDomains(ctx *fiber.Ctx, params V1ListDomainsParams) error {
	var request V1ListDomainsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListDomains(ctx.UserContext(), request.(V1ListDomainsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListDomains")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListDomainsResponseObject); ok {
		if err := validResponse.VisitV1ListDomainsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CreateDomain operation middleware
func (sh *strictHandler) V1CreateDomain(ctx *fiber.Ctx) error {
	var request V1CreateDomainRequestObject

	var body V1CreateDomainJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CreateDomain(ctx.UserContext(), request.(V1CreateDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CreateDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CreateDomainResponseObject); ok {
		if err := validResponse.VisitV1CreateDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SearchDomainGroups operation middleware
func (sh *strictHandler) V1SearchDomainGroups(ctx *fiber.Ctx, params V1SearchDomainGroupsParams) error {
	var request V1SearchDomainGroupsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SearchDomainGroups(ctx.UserContext(), request.(V1SearchDomainGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SearchDomainGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SearchDomainGroupsResponseObject); ok {
		if err := validResponse.VisitV1SearchDomainGroupsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteDomain operation middleware
func (sh *strictHandler) V1DeleteDomain(ctx *fiber.Ctx, domain string) error {
	var request V1DeleteDomainRequestObject

	request.Domain = domain

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteDomain(ctx.UserContext(), request.(V1DeleteDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteDomainResponseObject); ok {
		if err := validResponse.VisitV1DeleteDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetDomain operation middleware
func (sh *strictHandler) V1GetDomain(ctx *fiber.Ctx, domain string) error {
	var request V1GetDomainRequestObject

	request.Domain = domain

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetDomain(ctx.UserContext(), request.(V1GetDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetDomainResponseObject); ok {
		if err := validResponse.VisitV1GetDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateDomain operation middleware
func (sh *strictHandler) V1UpdateDomain(ctx *fiber.Ctx, domain string) error {
	var request V1UpdateDomainRequestObject

	request.Domain = domain

	var body V1UpdateDomainJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateDomain(ctx.UserContext(), request.(V1UpdateDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateDomainResponseObject); ok {
		if err := validResponse.VisitV1UpdateDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SearchDomainCandidates operation middleware
func (sh *strictHandler) V1SearchDomainCandidates(ctx *fiber.Ctx, domain string, params V1SearchDomainCandidatesParams) error {
	var request V1SearchDomainCandidatesRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SearchDomainCandidates(ctx.UserContext(), request.(V1SearchDomainCandidatesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SearchDomainCandidates")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SearchDomainCandidatesResponseObject); ok {
		if err := validResponse.VisitV1SearchDomainCandidatesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListDomainInvitations operation middleware
func (sh *strictHandler) V1ListDomainInvitations(ctx *fiber.Ctx, domain string, params V1ListDomainInvitationsParams) error {
	var request V1ListDomainInvitationsRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListDomainInvitations(ctx.UserContext(), request.(V1ListDomainInvitationsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListDomainInvitations")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListDomainInvitationsResponseObject); ok {
		if err := validResponse.VisitV1ListDomainInvitationsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CreateDomainInvitation operation middleware
func (sh *strictHandler) V1CreateDomainInvitation(ctx *fiber.Ctx, domain string) error {
	var request V1CreateDomainInvitationRequestObject

	request.Domain = domain

	var body V1CreateDomainInvitationJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CreateDomainInvitation(ctx.UserContext(), request.(V1CreateDomainInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CreateDomainInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CreateDomainInvitationResponseObject); ok {
		if err := validResponse.VisitV1CreateDomainInvitationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteDomainInvitation operation middleware
func (sh *strictHandler) V1DeleteDomainInvitation(ctx *fiber.Ctx, domain string, invitation string) error {
	var request V1DeleteDomainInvitationRequestObject

	request.Domain = domain
	request.Invitation = invitation

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteDomainInvitation(ctx.UserContext(), request.(V1DeleteDomainInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteDomainInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteDomainInvitationResponseObject); ok {
		if err := validResponse.VisitV1DeleteDomainInvitationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetDomainInvitation operation middleware
func (sh *strictHandler) V1GetDomainInvitation(ctx *fiber.Ctx, domain string, invitation string) error {
	var request V1GetDomainInvitationRequestObject

	request.Domain = domain
	request.Invitation = invitation

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetDomainInvitation(ctx.UserContext(), request.(V1GetDomainInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetDomainInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetDomainInvitationResponseObject); ok {
		if err := validResponse.VisitV1GetDomainInvitationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateDomainInvitation operation middleware
func (sh *strictHandler) V1UpdateDomainInvitation(ctx *fiber.Ctx, domain string, invitation string) error {
	var request V1UpdateDomainInvitationRequestObject

	request.Domain = domain
	request.Invitation = invitation

	var body V1UpdateDomainInvitationJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateDomainInvitation(ctx.UserContext(), request.(V1UpdateDomainInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateDomainInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateDomainInvitationResponseObject); ok {
		if err := validResponse.VisitV1UpdateDomainInvitationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1JoinDomainByInvitation operation middleware
func (sh *strictHandler) V1JoinDomainByInvitation(ctx *fiber.Ctx, domain string, params V1JoinDomainByInvitationParams) error {
	var request V1JoinDomainByInvitationRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1JoinDomainByInvitation(ctx.UserContext(), request.(V1JoinDomainByInvitationRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1JoinDomainByInvitation")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1JoinDomainByInvitationResponseObject); ok {
		if err := validResponse.VisitV1JoinDomainByInvitationResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListProblemSets operation middleware
func (sh *strictHandler) V1ListProblemSets(ctx *fiber.Ctx, domain string, params V1ListProblemSetsParams) error {
	var request V1ListProblemSetsRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListProblemSets(ctx.UserContext(), request.(V1ListProblemSetsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListProblemSets")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListProblemSetsResponseObject); ok {
		if err := validResponse.VisitV1ListProblemSetsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CreateProblemSet operation middleware
func (sh *strictHandler) V1CreateProblemSet(ctx *fiber.Ctx, domain string) error {
	var request V1CreateProblemSetRequestObject

	request.Domain = domain

	var body V1CreateProblemSetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CreateProblemSet(ctx.UserContext(), request.(V1CreateProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CreateProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CreateProblemSetResponseObject); ok {
		if err := validResponse.VisitV1CreateProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteProblemSet operation middleware
func (sh *strictHandler) V1DeleteProblemSet(ctx *fiber.Ctx, domain string, problemSet string) error {
	var request V1DeleteProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteProblemSet(ctx.UserContext(), request.(V1DeleteProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteProblemSetResponseObject); ok {
		if err := validResponse.VisitV1DeleteProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetProblemSet operation middleware
func (sh *strictHandler) V1GetProblemSet(ctx *fiber.Ctx, domain string, problemSet string) error {
	var request V1GetProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetProblemSet(ctx.UserContext(), request.(V1GetProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetProblemSetResponseObject); ok {
		if err := validResponse.VisitV1GetProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateProblemSet operation middleware
func (sh *strictHandler) V1UpdateProblemSet(ctx *fiber.Ctx, domain string, problemSet string) error {
	var request V1UpdateProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet

	var body V1UpdateProblemSetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateProblemSet(ctx.UserContext(), request.(V1UpdateProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateProblemSetResponseObject); ok {
		if err := validResponse.VisitV1UpdateProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListProblemsInProblemSet operation middleware
func (sh *strictHandler) V1ListProblemsInProblemSet(ctx *fiber.Ctx, domain string, problemSet string) error {
	var request V1ListProblemsInProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListProblemsInProblemSet(ctx.UserContext(), request.(V1ListProblemsInProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListProblemsInProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListProblemsInProblemSetResponseObject); ok {
		if err := validResponse.VisitV1ListProblemsInProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AddProblemInProblemSet operation middleware
func (sh *strictHandler) V1AddProblemInProblemSet(ctx *fiber.Ctx, domain string, problemSet string) error {
	var request V1AddProblemInProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet

	var body V1AddProblemInProblemSetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AddProblemInProblemSet(ctx.UserContext(), request.(V1AddProblemInProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AddProblemInProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AddProblemInProblemSetResponseObject); ok {
		if err := validResponse.VisitV1AddProblemInProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteProblemInProblemSet operation middleware
func (sh *strictHandler) V1DeleteProblemInProblemSet(ctx *fiber.Ctx, domain string, problemSet string, problem string) error {
	var request V1DeleteProblemInProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet
	request.Problem = problem

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteProblemInProblemSet(ctx.UserContext(), request.(V1DeleteProblemInProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteProblemInProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteProblemInProblemSetResponseObject); ok {
		if err := validResponse.VisitV1DeleteProblemInProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetProblemInProblemSet operation middleware
func (sh *strictHandler) V1GetProblemInProblemSet(ctx *fiber.Ctx, domain string, problemSet string, problem string) error {
	var request V1GetProblemInProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet
	request.Problem = problem

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetProblemInProblemSet(ctx.UserContext(), request.(V1GetProblemInProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetProblemInProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetProblemInProblemSetResponseObject); ok {
		if err := validResponse.VisitV1GetProblemInProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateProblemInProblemSet operation middleware
func (sh *strictHandler) V1UpdateProblemInProblemSet(ctx *fiber.Ctx, domain string, problemSet string, problem string) error {
	var request V1UpdateProblemInProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet
	request.Problem = problem

	var body V1UpdateProblemInProblemSetJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateProblemInProblemSet(ctx.UserContext(), request.(V1UpdateProblemInProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateProblemInProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateProblemInProblemSetResponseObject); ok {
		if err := validResponse.VisitV1UpdateProblemInProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SubmitSolutionToProblemSet operation middleware
func (sh *strictHandler) V1SubmitSolutionToProblemSet(ctx *fiber.Ctx, domain string, problemSet string, problem string) error {
	var request V1SubmitSolutionToProblemSetRequestObject

	request.Domain = domain
	request.ProblemSet = problemSet
	request.Problem = problem

	request.Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SubmitSolutionToProblemSet(ctx.UserContext(), request.(V1SubmitSolutionToProblemSetRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SubmitSolutionToProblemSet")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SubmitSolutionToProblemSetResponseObject); ok {
		if err := validResponse.VisitV1SubmitSolutionToProblemSetResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListProblems operation middleware
func (sh *strictHandler) V1ListProblems(ctx *fiber.Ctx, domain string, params V1ListProblemsParams) error {
	var request V1ListProblemsRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListProblems(ctx.UserContext(), request.(V1ListProblemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListProblems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListProblemsResponseObject); ok {
		if err := validResponse.VisitV1ListProblemsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CreateProblem operation middleware
func (sh *strictHandler) V1CreateProblem(ctx *fiber.Ctx, domain string) error {
	var request V1CreateProblemRequestObject

	request.Domain = domain

	var body V1CreateProblemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CreateProblem(ctx.UserContext(), request.(V1CreateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CreateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CreateProblemResponseObject); ok {
		if err := validResponse.VisitV1CreateProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CloneProblem operation middleware
func (sh *strictHandler) V1CloneProblem(ctx *fiber.Ctx, domain string) error {
	var request V1CloneProblemRequestObject

	request.Domain = domain

	var body V1CloneProblemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CloneProblem(ctx.UserContext(), request.(V1CloneProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CloneProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CloneProblemResponseObject); ok {
		if err := validResponse.VisitV1CloneProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteProblem operation middleware
func (sh *strictHandler) V1DeleteProblem(ctx *fiber.Ctx, domain string, problem string) error {
	var request V1DeleteProblemRequestObject

	request.Domain = domain
	request.Problem = problem

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteProblem(ctx.UserContext(), request.(V1DeleteProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteProblemResponseObject); ok {
		if err := validResponse.VisitV1DeleteProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetProblem operation middleware
func (sh *strictHandler) V1GetProblem(ctx *fiber.Ctx, domain string, problem string) error {
	var request V1GetProblemRequestObject

	request.Domain = domain
	request.Problem = problem

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetProblem(ctx.UserContext(), request.(V1GetProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetProblemResponseObject); ok {
		if err := validResponse.VisitV1GetProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateProblem operation middleware
func (sh *strictHandler) V1UpdateProblem(ctx *fiber.Ctx, domain string, problem string) error {
	var request V1UpdateProblemRequestObject

	request.Domain = domain
	request.Problem = problem

	var body V1UpdateProblemJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateProblem(ctx.UserContext(), request.(V1UpdateProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateProblemResponseObject); ok {
		if err := validResponse.VisitV1UpdateProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SubmitSolutionToProblem operation middleware
func (sh *strictHandler) V1SubmitSolutionToProblem(ctx *fiber.Ctx, domain string, problem string) error {
	var request V1SubmitSolutionToProblemRequestObject

	request.Domain = domain
	request.Problem = problem

	request.Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SubmitSolutionToProblem(ctx.UserContext(), request.(V1SubmitSolutionToProblemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SubmitSolutionToProblem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SubmitSolutionToProblemResponseObject); ok {
		if err := validResponse.VisitV1SubmitSolutionToProblemResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListProblemConfigCommits operation middleware
func (sh *strictHandler) V1ListProblemConfigCommits(ctx *fiber.Ctx, domain string, problem string, params V1ListProblemConfigCommitsParams) error {
	var request V1ListProblemConfigCommitsRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListProblemConfigCommits(ctx.UserContext(), request.(V1ListProblemConfigCommitsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListProblemConfigCommits")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListProblemConfigCommitsResponseObject); ok {
		if err := validResponse.VisitV1ListProblemConfigCommitsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateProblemConfigByArchive operation middleware
func (sh *strictHandler) V1UpdateProblemConfigByArchive(ctx *fiber.Ctx, domain string, problem string, params V1UpdateProblemConfigByArchiveParams) error {
	var request V1UpdateProblemConfigByArchiveRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Params = params

	request.Body = multipart.NewReader(bytes.NewReader(ctx.Request().Body()), string(ctx.Request().Header.MultipartFormBoundary()))

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateProblemConfigByArchive(ctx.UserContext(), request.(V1UpdateProblemConfigByArchiveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateProblemConfigByArchive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateProblemConfigByArchiveResponseObject); ok {
		if err := validResponse.VisitV1UpdateProblemConfigByArchiveResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateProblemConfigJson operation middleware
func (sh *strictHandler) V1UpdateProblemConfigJson(ctx *fiber.Ctx, domain string, problem string) error {
	var request V1UpdateProblemConfigJsonRequestObject

	request.Domain = domain
	request.Problem = problem

	var body V1UpdateProblemConfigJsonJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateProblemConfigJson(ctx.UserContext(), request.(V1UpdateProblemConfigJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateProblemConfigJson")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateProblemConfigJsonResponseObject); ok {
		if err := validResponse.VisitV1UpdateProblemConfigJsonResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DiffProblemConfigDefaultBranch operation middleware
func (sh *strictHandler) V1DiffProblemConfigDefaultBranch(ctx *fiber.Ctx, domain string, problem string, params V1DiffProblemConfigDefaultBranchParams) error {
	var request V1DiffProblemConfigDefaultBranchRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DiffProblemConfigDefaultBranch(ctx.UserContext(), request.(V1DiffProblemConfigDefaultBranchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DiffProblemConfigDefaultBranch")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DiffProblemConfigDefaultBranchResponseObject); ok {
		if err := validResponse.VisitV1DiffProblemConfigDefaultBranchResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListLatestProblemConfigObjectsUnderAGivenPrefix operation middleware
func (sh *strictHandler) V1ListLatestProblemConfigObjectsUnderAGivenPrefix(ctx *fiber.Ctx, domain string, problem string, params V1ListLatestProblemConfigObjectsUnderAGivenPrefixParams) error {
	var request V1ListLatestProblemConfigObjectsUnderAGivenPrefixRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListLatestProblemConfigObjectsUnderAGivenPrefix(ctx.UserContext(), request.(V1ListLatestProblemConfigObjectsUnderAGivenPrefixRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListLatestProblemConfigObjectsUnderAGivenPrefix")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListLatestProblemConfigObjectsUnderAGivenPrefixResponseObject); ok {
		if err := validResponse.VisitV1ListLatestProblemConfigObjectsUnderAGivenPrefixResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DownloadProblemConfigArchive operation middleware
func (sh *strictHandler) V1DownloadProblemConfigArchive(ctx *fiber.Ctx, domain string, problem string, config string, params V1DownloadProblemConfigArchiveParams) error {
	var request V1DownloadProblemConfigArchiveRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Config = config
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DownloadProblemConfigArchive(ctx.UserContext(), request.(V1DownloadProblemConfigArchiveRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DownloadProblemConfigArchive")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DownloadProblemConfigArchiveResponseObject); ok {
		if err := validResponse.VisitV1DownloadProblemConfigArchiveResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetProblemConfigJson operation middleware
func (sh *strictHandler) V1GetProblemConfigJson(ctx *fiber.Ctx, domain string, problem string, config string) error {
	var request V1GetProblemConfigJsonRequestObject

	request.Domain = domain
	request.Problem = problem
	request.Config = config

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetProblemConfigJson(ctx.UserContext(), request.(V1GetProblemConfigJsonRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetProblemConfigJson")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetProblemConfigJsonResponseObject); ok {
		if err := validResponse.VisitV1GetProblemConfigJsonResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListRecordsInDomain operation middleware
func (sh *strictHandler) V1ListRecordsInDomain(ctx *fiber.Ctx, domain string, params V1ListRecordsInDomainParams) error {
	var request V1ListRecordsInDomainRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListRecordsInDomain(ctx.UserContext(), request.(V1ListRecordsInDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListRecordsInDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListRecordsInDomainResponseObject); ok {
		if err := validResponse.VisitV1ListRecordsInDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetRecord operation middleware
func (sh *strictHandler) V1GetRecord(ctx *fiber.Ctx, domain string, record openapi_types.UUID) error {
	var request V1GetRecordRequestObject

	request.Domain = domain
	request.Record = record

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetRecord(ctx.UserContext(), request.(V1GetRecordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetRecord")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetRecordResponseObject); ok {
		if err := validResponse.VisitV1GetRecordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SubmitCaseByJudger operation middleware
func (sh *strictHandler) V1SubmitCaseByJudger(ctx *fiber.Ctx, domain string, record string, index int) error {
	var request V1SubmitCaseByJudgerRequestObject

	request.Domain = domain
	request.Record = record
	request.Index = index

	var body V1SubmitCaseByJudgerJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SubmitCaseByJudger(ctx.UserContext(), request.(V1SubmitCaseByJudgerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SubmitCaseByJudger")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SubmitCaseByJudgerResponseObject); ok {
		if err := validResponse.VisitV1SubmitCaseByJudgerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1SubmitRecordByJudger operation middleware
func (sh *strictHandler) V1SubmitRecordByJudger(ctx *fiber.Ctx, domain string, record string) error {
	var request V1SubmitRecordByJudgerRequestObject

	request.Domain = domain
	request.Record = record

	var body V1SubmitRecordByJudgerJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1SubmitRecordByJudger(ctx.UserContext(), request.(V1SubmitRecordByJudgerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1SubmitRecordByJudger")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1SubmitRecordByJudgerResponseObject); ok {
		if err := validResponse.VisitV1SubmitRecordByJudgerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ClaimRecordByJudger operation middleware
func (sh *strictHandler) V1ClaimRecordByJudger(ctx *fiber.Ctx, domain string, record string) error {
	var request V1ClaimRecordByJudgerRequestObject

	request.Domain = domain
	request.Record = record

	var body V1ClaimRecordByJudgerJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ClaimRecordByJudger(ctx.UserContext(), request.(V1ClaimRecordByJudgerRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ClaimRecordByJudger")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ClaimRecordByJudgerResponseObject); ok {
		if err := validResponse.VisitV1ClaimRecordByJudgerResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListDomainRoles operation middleware
func (sh *strictHandler) V1ListDomainRoles(ctx *fiber.Ctx, domain string, params V1ListDomainRolesParams) error {
	var request V1ListDomainRolesRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListDomainRoles(ctx.UserContext(), request.(V1ListDomainRolesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListDomainRoles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListDomainRolesResponseObject); ok {
		if err := validResponse.VisitV1ListDomainRolesResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1CreateDomainRole operation middleware
func (sh *strictHandler) V1CreateDomainRole(ctx *fiber.Ctx, domain string) error {
	var request V1CreateDomainRoleRequestObject

	request.Domain = domain

	var body V1CreateDomainRoleJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1CreateDomainRole(ctx.UserContext(), request.(V1CreateDomainRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1CreateDomainRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1CreateDomainRoleResponseObject); ok {
		if err := validResponse.VisitV1CreateDomainRoleResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1DeleteDomainRole operation middleware
func (sh *strictHandler) V1DeleteDomainRole(ctx *fiber.Ctx, domain string, role string) error {
	var request V1DeleteDomainRoleRequestObject

	request.Domain = domain
	request.Role = role

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1DeleteDomainRole(ctx.UserContext(), request.(V1DeleteDomainRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1DeleteDomainRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1DeleteDomainRoleResponseObject); ok {
		if err := validResponse.VisitV1DeleteDomainRoleResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetDomainRole operation middleware
func (sh *strictHandler) V1GetDomainRole(ctx *fiber.Ctx, domain string, role string) error {
	var request V1GetDomainRoleRequestObject

	request.Domain = domain
	request.Role = role

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetDomainRole(ctx.UserContext(), request.(V1GetDomainRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetDomainRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetDomainRoleResponseObject); ok {
		if err := validResponse.VisitV1GetDomainRoleResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateDomainRole operation middleware
func (sh *strictHandler) V1UpdateDomainRole(ctx *fiber.Ctx, domain string, role string) error {
	var request V1UpdateDomainRoleRequestObject

	request.Domain = domain
	request.Role = role

	var body V1UpdateDomainRoleJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateDomainRole(ctx.UserContext(), request.(V1UpdateDomainRoleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateDomainRole")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateDomainRoleResponseObject); ok {
		if err := validResponse.VisitV1UpdateDomainRoleResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TransferDomain operation middleware
func (sh *strictHandler) V1TransferDomain(ctx *fiber.Ctx, domain string) error {
	var request V1TransferDomainRequestObject

	request.Domain = domain

	var body V1TransferDomainJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1TransferDomain(ctx.UserContext(), request.(V1TransferDomainRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TransferDomain")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1TransferDomainResponseObject); ok {
		if err := validResponse.VisitV1TransferDomainResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListDomainUsers operation middleware
func (sh *strictHandler) V1ListDomainUsers(ctx *fiber.Ctx, domain string, params V1ListDomainUsersParams) error {
	var request V1ListDomainUsersRequestObject

	request.Domain = domain
	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListDomainUsers(ctx.UserContext(), request.(V1ListDomainUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListDomainUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListDomainUsersResponseObject); ok {
		if err := validResponse.VisitV1ListDomainUsersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1AddDomainUser operation middleware
func (sh *strictHandler) V1AddDomainUser(ctx *fiber.Ctx, domain string) error {
	var request V1AddDomainUserRequestObject

	request.Domain = domain

	var body V1AddDomainUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1AddDomainUser(ctx.UserContext(), request.(V1AddDomainUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1AddDomainUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1AddDomainUserResponseObject); ok {
		if err := validResponse.VisitV1AddDomainUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1RemoveDomainUser operation middleware
func (sh *strictHandler) V1RemoveDomainUser(ctx *fiber.Ctx, domain string, user string) error {
	var request V1RemoveDomainUserRequestObject

	request.Domain = domain
	request.User = user

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1RemoveDomainUser(ctx.UserContext(), request.(V1RemoveDomainUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1RemoveDomainUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1RemoveDomainUserResponseObject); ok {
		if err := validResponse.VisitV1RemoveDomainUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetDomainUser operation middleware
func (sh *strictHandler) V1GetDomainUser(ctx *fiber.Ctx, domain string, user string) error {
	var request V1GetDomainUserRequestObject

	request.Domain = domain
	request.User = user

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetDomainUser(ctx.UserContext(), request.(V1GetDomainUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetDomainUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetDomainUserResponseObject); ok {
		if err := validResponse.VisitV1GetDomainUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateDomainUser operation middleware
func (sh *strictHandler) V1UpdateDomainUser(ctx *fiber.Ctx, domain string, user string) error {
	var request V1UpdateDomainUserRequestObject

	request.Domain = domain
	request.User = user

	var body V1UpdateDomainUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateDomainUser(ctx.UserContext(), request.(V1UpdateDomainUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateDomainUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateDomainUserResponseObject); ok {
		if err := validResponse.VisitV1UpdateDomainUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetDomainUserPermission operation middleware
func (sh *strictHandler) V1GetDomainUserPermission(ctx *fiber.Ctx, domain string, user string) error {
	var request V1GetDomainUserPermissionRequestObject

	request.Domain = domain
	request.User = user

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetDomainUserPermission(ctx.UserContext(), request.(V1GetDomainUserPermissionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetDomainUserPermission")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetDomainUserPermissionResponseObject); ok {
		if err := validResponse.VisitV1GetDomainUserPermissionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1JwtDecoded operation middleware
func (sh *strictHandler) V1JwtDecoded(ctx *fiber.Ctx) error {
	var request V1JwtDecodedRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1JwtDecoded(ctx.UserContext(), request.(V1JwtDecodedRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1JwtDecoded")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1JwtDecodedResponseObject); ok {
		if err := validResponse.VisitV1JwtDecodedResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ListProblemGroups operation middleware
func (sh *strictHandler) V1ListProblemGroups(ctx *fiber.Ctx, params V1ListProblemGroupsParams) error {
	var request V1ListProblemGroupsRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ListProblemGroups(ctx.UserContext(), request.(V1ListProblemGroupsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ListProblemGroups")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ListProblemGroupsResponseObject); ok {
		if err := validResponse.VisitV1ListProblemGroupsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1TestErrorReport operation middleware
func (sh *strictHandler) V1TestErrorReport(ctx *fiber.Ctx) error {
	var request V1TestErrorReportRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1TestErrorReport(ctx.UserContext(), request.(V1TestErrorReportRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1TestErrorReport")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1TestErrorReportResponseObject); ok {
		if err := validResponse.VisitV1TestErrorReportResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetCurrentUser operation middleware
func (sh *strictHandler) V1GetCurrentUser(ctx *fiber.Ctx) error {
	var request V1GetCurrentUserRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetCurrentUser(ctx.UserContext(), request.(V1GetCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetCurrentUserResponseObject); ok {
		if err := validResponse.VisitV1GetCurrentUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1UpdateCurrentUser operation middleware
func (sh *strictHandler) V1UpdateCurrentUser(ctx *fiber.Ctx) error {
	var request V1UpdateCurrentUserRequestObject

	var body V1UpdateCurrentUserJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1UpdateCurrentUser(ctx.UserContext(), request.(V1UpdateCurrentUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1UpdateCurrentUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1UpdateCurrentUserResponseObject); ok {
		if err := validResponse.VisitV1UpdateCurrentUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1ChangePassword operation middleware
func (sh *strictHandler) V1ChangePassword(ctx *fiber.Ctx) error {
	var request V1ChangePasswordRequestObject

	var body V1ChangePasswordJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1ChangePassword(ctx.UserContext(), request.(V1ChangePasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1ChangePassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1ChangePasswordResponseObject); ok {
		if err := validResponse.VisitV1ChangePasswordResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1GetUser operation middleware
func (sh *strictHandler) V1GetUser(ctx *fiber.Ctx, uid string) error {
	var request V1GetUserRequestObject

	request.Uid = uid

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1GetUser(ctx.UserContext(), request.(V1GetUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1GetUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1GetUserResponseObject); ok {
		if err := validResponse.VisitV1GetUserResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// V1Version operation middleware
func (sh *strictHandler) V1Version(ctx *fiber.Ctx) error {
	var request V1VersionRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.V1Version(ctx.UserContext(), request.(V1VersionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "V1Version")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(V1VersionResponseObject); ok {
		if err := validResponse.VisitV1VersionResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
